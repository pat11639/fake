<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pat Shaughnessy</title>
  <id>http://patshaughnessy.net</id>
  <updated>2008-09-03T00:00:00Z</updated>
  <author>
    <name></name>
  </author>
  <entry>
    <title>Trying to Represent a Tree Structure Using Postgres</title>
    <link href="http://patshaughnessy.net/2017/12/11/trying-to-represent-a-tree-structure-using-postgres" rel="alternate"/>
    <id>http://patshaughnessy.net/2017/12/11/trying-to-represent-a-tree-structure-using-postgres</id>
    <published>2017-12-11T04:00:00Z</published>
    <updated>2017-12-11T04:00:00Z</updated>
    <category>ruby</category>
    <author>
      <name></name>
    </author>
    <summary type="html">&lt;div style="float: left; padding: 8px 30px 40px 0px; text-align: center; line-height:18px"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2017/12/11/tree1.jpg"&gt;
&lt;/div&gt;


&lt;p&gt;Suppose you had a hierarchical data structure in your application &amp;ndash; how would
you save it in a database? How would you represent a complex tree structure
using flat rows and columns?&lt;/p&gt;

&lt;p&gt;There are a few different, equal</summary>
    <content type="html">&lt;div style="float: left; padding: 8px 30px 40px 0px; text-align: center; line-height:18px"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2017/12/11/tree1.jpg"&gt;
&lt;/div&gt;


&lt;p&gt;Suppose you had a hierarchical data structure in your application &amp;ndash; how would
you save it in a database? How would you represent a complex tree structure
using flat rows and columns?&lt;/p&gt;

&lt;p&gt;There are a few different, equally valid options. In this series of blog posts,
I’ll take a close look at one option that Postgres provides, the &lt;a href="https://www.postgresql.org/docs/current/static/ltree.html"&gt;LTREE
extension&lt;/a&gt;. If you
install and enable LTREE on your Postgres server, it will add powerful SQL
operators and functions that support tree operations.&lt;/p&gt;

&lt;p&gt;But what are these new SQL operators, and how do you use them? And how does
LTREE actually work? What Computer Science does it use behind the scenes to
enable fast tree operations?&lt;/p&gt;

&lt;p&gt;This week I’ll publish a series of blog posts on the Postgres LTREE extension.
I&amp;rsquo;ll get started today by trying to insert a tree structure into a Postgres
table using standard SQL, and during the rest of the week I&amp;rsquo;ll take a close
look at LTREE: how to install it, how to use it, and how it works.&lt;/p&gt;

&lt;div style="clear: both"&gt;&lt;/div&gt;


&lt;h2&gt;An Example Tree&lt;/h2&gt;

&lt;p&gt;My actual data set was more complicated, of course, but for the sake of example
let’s suppose I needed to save this tree in a Postgres table:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/12/11/example-tree.png"&gt;&lt;/p&gt;

&lt;p&gt;There are many different tree-like data structures in Computer Science, but
this is probably the simplest: no cycles, no ordering of child nodes, and all
the child nodes are accessible moving down from a single root. Should be easy,
right?&lt;/p&gt;

&lt;p&gt;At first, I thought it would be. I started by creating a table with a
&lt;span class="code"&gt;parent_id&lt;/span&gt; foreign key column, like this:&lt;/p&gt;

&lt;pre&gt;
create table tree(
    id serial primary key,
    letter char,
    parent_id integer references tree (id)
);
&lt;/pre&gt;


&lt;p&gt;The idea was that each row in my table represented a single node or element of
the tree, and would identify its parent using the &lt;span class="code"&gt;parent_id&lt;/span&gt; column. My single
root node, &lt;span class="code"&gt;A&lt;/span&gt;, had no parent so I saved it first with
a &lt;span class="code"&gt;NULL&lt;/span&gt; parent id:&lt;/p&gt;

&lt;pre&gt;
insert into tree (letter, parent_id) values ('A', null);

select * from tree;

id  | letter | parent_id 
----+--------+-----------
1   | A      |          
(1 row)
&lt;/pre&gt;


&lt;p&gt;And then I inserted each of its child nodes like this:&lt;/p&gt;

&lt;pre&gt;
insert into tree (letter, parent_id) values ('B', 1);
insert into tree (letter, parent_id) values ('C', 1);

select * from tree;

id  | letter | parent_id 
----+--------+-----------
1   | A      |          
2   | B      |         1
3   | C      |         1
(3 rows)
&lt;/pre&gt;


&lt;p&gt;Because &lt;span class="code"&gt;A&lt;/span&gt; has &lt;span class="code"&gt;id&lt;/span&gt;=1, I set
&lt;span class="code"&gt;parent_id&lt;/span&gt;=1 for &lt;span class="code"&gt;B&lt;/span&gt; and
&lt;span class="code"&gt;C&lt;/span&gt;. This is a simple example of the &lt;em&gt;adjacency list&lt;/em&gt;
algorithm: each row contains a list of its neighbors or adjacent rows. In this
case I was only recording each row’s parent. And the table is &lt;em&gt;self-referencing&lt;/em&gt;
because it contains a foreign key (&lt;span class="code"&gt;parent_id&lt;/span&gt;)
referencing another column in the same table.&lt;/p&gt;

&lt;p&gt;I continued to fill out my tree structure with a few more insert statements:&lt;/p&gt;

&lt;pre&gt;
insert into tree (letter, parent_id) values ('D', 3);
insert into tree (letter, parent_id) values ('E', 3);
insert into tree (letter, parent_id) values ('F', 3);
insert into tree (letter, parent_id) values ('G', 2);

select * from tree;

id  | letter | parent_id 
----+--------+-----------
1   | A      |          
2   | B      |         1
3   | C      |         1
4   | D      |         3
5   | E      |         3
6   | F      |         3
7   | G      |         2
(7 rows)
&lt;/pre&gt;


&lt;h2&gt;Did My Postgres Tree Work?&lt;/h2&gt;

&lt;p&gt;At first glance, my data structure worked well. I could easily find the parent
of &lt;span class="code"&gt;E&lt;/span&gt;:&lt;/p&gt;

&lt;pre&gt;
select parent_id from tree where letter = 'E'

parent_id 
-----------
3
(1 row)

select letter from tree where id = 3

letter 
--------
C
(1 row)
&lt;/pre&gt;


&lt;p&gt;And the children of &lt;span class="code"&gt;C&lt;/span&gt; like this:&lt;/p&gt;

&lt;pre&gt;
select letter from tree where parent_id = 3

letter 
--------
D
E
F
(3 rows)
&lt;/pre&gt;


&lt;h2&gt;Recursive Tree Operations&lt;/h2&gt;

&lt;p&gt;And it was also very easy to count how many children each node had, for example
this SQL statement returns the number of children under &lt;span class="code"&gt;A&lt;/span&gt;:&lt;/p&gt;

&lt;pre&gt;
select count(*) from tree where parent_id = 1;

count 
-------
2
(1 row)
&lt;/pre&gt;


&lt;p&gt;But what if I needed to know how many children &lt;span class="code"&gt;A&lt;/span&gt; had,
recursively? That is, what if I needed to count its children, grandchildren,
great-grandchildren, etc.?&lt;/p&gt;

&lt;p&gt;Well, first I would have to find the direct children of &lt;span class="code"&gt;A&lt;/span&gt;:&lt;/p&gt;

&lt;pre&gt;
select id from tree where parent_id = 1;

id 
----
2
3
(2 rows)
&lt;/pre&gt;


&lt;p&gt;Then to find the grandchildren I would need to query for the children of the
children, inserting the id values from the previous statement:&lt;/p&gt;

&lt;pre&gt;
select id from tree where parent_id in (2, 3);

id 
----
4
5
6
7
(4 rows)
&lt;/pre&gt;


&lt;p&gt;And then I would add the child count with the grandchild count: 2 + 4 = 6.&lt;/p&gt;

&lt;p&gt;My example tree ends here, so I’m done. But this doesn’t scale; suppose my tree
had 10, 20 or 100 levels in it. I would have to execute repeated select
statements, stepping down each level of the tree structure under the parent
node:&lt;/p&gt;

&lt;pre&gt;
select count(*) from tree where parent_id in (GREAT-GRANDCHILD-IDS);
select count(*) from tree where parent_id in (GREAT-GREAT-GRANDCHILD-IDS);
select count(*) from tree where parent_id in (GREAT-GREAT-GREAT-GRANDCHILD-IDS);
&lt;/pre&gt;


&lt;p&gt;etc.&lt;/p&gt;

&lt;p&gt;In other words, I need to execute &lt;em&gt;n&lt;/em&gt;-1 SQL statements, where &lt;em&gt;n&lt;/em&gt; is the number of
levels in the tree under the parent node, each time inserting all of the ids
returned by the previous query. And to find the total count I would have to sum
the number of ids returned by each query along the way. Certainly not an
efficient algorithm!&lt;/p&gt;

&lt;h2&gt;There must be a better way&lt;/h2&gt;

&lt;p&gt;My &lt;span class="code"&gt;parent_id&lt;/span&gt; foreign key worked well for very simple
tree operations, but not for more complex tasks, such as recursively counting
nodes. If I setup my database schema differently, in a more thoughtful and
complex way, can I avoid the repeated SQL calls?&lt;/p&gt;

&lt;p&gt;Yes! There are a variety of options. One common solution is to use a &lt;a href="https://en.wikipedia.org/wiki/Nested_set_model"&gt;nested set&lt;/a&gt;
approach. In this design, each row contains a description of the set of other
nodes that appear under it in the tree by saving the maximum and minimum id
values of that subset of rows, the “nested set.” Using this scheme, querying
children and grandchildren recursively becomes very easy. The drawback is that
I would have to recalculate these values up and down the tree each time a new
row was added.&lt;/p&gt;

&lt;p&gt;Another solution, &lt;em&gt;path enumeration&lt;/em&gt;, involves using a column to save the path or
position of each node in the tree. This can be a powerful solution, but
recursive queries and other tree operations require special support to parse
and manipulate these paths.&lt;/p&gt;

&lt;p&gt;A completely different approach would be to use a &lt;a href="https://en.wikipedia.org/wiki/Graph_database"&gt;graph-oriented
database&lt;/a&gt;, such as
&lt;a href="https://neo4j.com"&gt;Neo4J&lt;/a&gt;. These are database servers designed entirely around
this problem: saving hierarchical data, or more generally networks of related
data values.&lt;/p&gt;

&lt;p&gt;But I didn’t want to leave Postgres behind: I already had a working, well
tested application. Why start over from scratch just because I added a single
tree structure to my app? Why add new infrastructure and complexity to my
overall system to support a single new data structure?&lt;/p&gt;

&lt;p&gt;It turns out I didn’t have to: Postgres itself supports one of the two tree
algorithms I mentioned above: path enumeration. Bundled inside of the Postgres
source tree is an “extension,” an optional piece of C code you need compile,
install and enable, that supports tree SQL operations using path enumeration.
In my next post, I’ll show you how to install and use the &lt;a href="https://www.postgresql.org/docs/current/static/ltree.html"&gt;LTREE Postgres
extension&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pointers in C and x86 Assembly Language</title>
    <link href="http://patshaughnessy.net/2017/1/20/pointers-in-c-and-x86-assembly-language" rel="alternate"/>
    <id>http://patshaughnessy.net/2017/1/20/pointers-in-c-and-x86-assembly-language</id>
    <published>2017-01-20T04:00:00Z</published>
    <updated>2017-01-20T04:00:00Z</updated>
    <category>ruby</category>
    <author>
      <name></name>
    </author>
    <summary type="html">&lt;div style="float: left; padding: 8px 30px 40px 0px; text-align: center; line-height:18px"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2017/1/20/ram.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;16GB of DDR random access memory&lt;br/&gt;
  my son used in his new gaming PC
&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;Recently I’ve been trying to learn how to read x86 assembly language. In &lt;a href="http://patshaughnessy.net/2016/11/26/learning-to-read-x86-asse</summary>
    <content type="html">&lt;div style="float: left; padding: 8px 30px 40px 0px; text-align: center; line-height:18px"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2017/1/20/ram.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;16GB of DDR random access memory&lt;br/&gt;
  my son used in his new gaming PC
&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;Recently I’ve been trying to learn how to read x86 assembly language. In &lt;a href="http://patshaughnessy.net/2016/11/26/learning-to-read-x86-assembly-language"&gt;my
last
post&lt;/a&gt;,
I explored basic x86 syntax in a very simple program that used a few registers.
But in that post I didn’t cover how instructions refer to values located in
memory and not in a register. To be useful at all, x86 code must load data from
memory into a register, and eventually save data from a register back into
memory.&lt;/p&gt;

&lt;p&gt;Assembly language instructions access values in memory by considering a
register’s contents to be a memory address, and then dereferencing it the same
way you would use a pointer in a C program. In fact, to me C and assembly
language seem very similar in this way, which I suspect is not a coincidence.&lt;/p&gt;

&lt;p&gt;Today I’ll read and try to understand a very simple x86 assembly language
program that reads from and writes to memory. To make the x86 instructions a
bit easier to follow, I’ll first rewrite them using C pointer syntax. If you’re
an experienced C programmer, this will make the x86 code easy to read. Or if
you’re not familiar with C, this is your chance to learn both C and x86 pointer
syntax at the same time.&lt;/p&gt;

&lt;h2&gt;Writing A Program That Accesses Memory&lt;/h2&gt;

&lt;p&gt;But first, we need an example program that accesses memory. Where can I find
one? Do I need to find some low level code from a device driver or operating
system kernel? No, of course not! Every program you or I have ever written
accesses memory. All I need to do is translate one of them into x86 assembly
language.&lt;/p&gt;

&lt;p&gt;I’ll use my Ruby example from last time, but with a new line of code that saves
the constant value 42 into a local variable. After I compile it I’ll able able
to look for the number 42 in the assembly language code:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_forty_two&lt;/span&gt;(n)
  a = &lt;span class="integer"&gt;42&lt;/span&gt;
  n+a 
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once again I’ll use &lt;a href="https://crystal-lang.org"&gt;Crystal&lt;/a&gt; to compile my Ruby code:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
crystal build add_forty_two.rb --emit asm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Searching through the generated &lt;code&gt;add_forty_two.s file&lt;/code&gt;, I find the
&lt;code&gt;add\_forty\_two&lt;/code&gt; function, clean it up and paste its assembly language
instructions back into my Ruby function:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_forty_two&lt;/span&gt;(n)

  pushq   %rbp  
  movq    %rsp, %rbp
  movl    %edi, &lt;span class="integer"&gt;-8&lt;/span&gt;(%rbp)
  movl    &lt;span class="global-variable"&gt;$42&lt;/span&gt;, &lt;span class="integer"&gt;-4&lt;/span&gt;(%rbp)
  movl    &lt;span class="integer"&gt;-8&lt;/span&gt;(%rbp), %eax
  addl    &lt;span class="integer"&gt;-4&lt;/span&gt;(%rbp), %eax
  popq    %rbp  
  retq  

&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;Assembly Language: The Script Your Computer Follows&lt;/h2&gt;

&lt;p&gt;This code is quite literally the script my computer follows: What happens when
I call &lt;code&gt;add_forty_two&lt;/code&gt;? How does my computer know what to do? How does it add 42
to the given argument? It follows the script.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/the-tempest.png"&gt;&lt;/p&gt;

&lt;div style="padding: 0px 30px 30px 0px; text-align: center; line-height:18px"&gt;
  &lt;i&gt;Trying to read x86 assembly language is a bit like&lt;br/&gt;
trying to read an old Shakespearean manuscript&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;The problem is this script contains Old English words I don’t understand &amp;ndash; and
the words I do know are spelled differently. I can almost understand what this
line of code means:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
movl    &lt;span class="global-variable"&gt;$42&lt;/span&gt;, &lt;span class="integer"&gt;-4&lt;/span&gt;(%rbp)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;…but not quite. I can guess by reading my original Ruby code it’s probably
saving 42 in the local variable &lt;code&gt;a&lt;/code&gt;. In my last post I learned that the “l”
suffix in movl means the instruction will move a long, or 32 bit value, from
one place to another. I also learned last time that the “$” prefix means the
number 42 is a constant.&lt;/p&gt;

&lt;p&gt;But where is &lt;code&gt;a&lt;/code&gt; located? And what does &lt;code&gt;-4(%rbp)&lt;/code&gt; mean? The surrounding
instructions are worse; they use similar syntax but there are no clues as to
what they are doing. Like a frustrated high school student trying to read &lt;em&gt;The
Tempest&lt;/em&gt;, I’m at a loss.&lt;/p&gt;

&lt;p&gt;I need some cliff notes. I need to see this assembly language script translated
into standard, modern English, a language I understand.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/the-tempest-cleaned-up.png"&gt;&lt;/p&gt;

&lt;div style="padding: 0px 30px 30px 0px; text-align: center; line-height:18px"&gt;
  &lt;i&gt;C code is like a modern, cleaned up copy of a Shakespeare&lt;br/&gt;
play. Equally confusing but somewhat easier to read.&lt;/i&gt;
&lt;/div&gt;


&lt;h2&gt;Transcribing x86 Assembly Language into C&lt;/h2&gt;

&lt;p&gt;To illustrate what I mean, I’ll rewrite each x86 instruction with the
equivalent C syntax:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/transcribe.png"&gt;&lt;/p&gt;

&lt;p&gt;If you’re an experienced C programmer, the pseudocode on the right side should
be somewhat more readable. You can see how the x86 instructions access memory
by interpreting register values as memory addresses, and how instructions can
also pre-decrement or post-increment these addresses. We’ve translated
something completely unfamiliar into a format that is somewhat easier to
follow.&lt;/p&gt;

&lt;p&gt;If you’re not familiar with C, then skip down to the next section, where I’ll
explain what three of these instructions do. You’ll learn what the x86 and C
notation means, how they are different and how they are similar.&lt;/p&gt;

&lt;h2&gt;C: A Mix of High And Low Level Notation&lt;/h2&gt;

&lt;p&gt;But while my C pseudocode is syntactically correct, it makes no sense. Negative
array indices are normally invalid in C, and, of course, a C program would
never directly reference registers on the CPU directly like this to begin
with.&lt;/p&gt;

&lt;p&gt;In fact, a proper C program to add 42 would resemble the Ruby code I started
with above:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="preprocessor"&gt;#include&lt;/span&gt; &lt;span class="include"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="predefined-type"&gt;unsigned&lt;/span&gt; &lt;span class="predefined-type"&gt;int&lt;/span&gt; add_forty_two(n)
{
  &lt;span class="predefined-type"&gt;unsigned&lt;/span&gt; &lt;span class="predefined-type"&gt;int&lt;/span&gt; a = &lt;span class="integer"&gt;42&lt;/span&gt;; 
  &lt;span class="keyword"&gt;return&lt;/span&gt; a+n;
}

printf(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;50 + 42 is %d&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, add_forty_two(&lt;span class="integer"&gt;50&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;My point today is that C mixes high and low level language notation. The
underlying features and capabilities of my x86 microprocessor leak through into
C programming syntax. Writing in C, I can create functions, variables and
return values like a high level language, but I can also drop down to the level
my microprocessor operates at, accessing memory directly using pointers.&lt;/p&gt;

&lt;p&gt;And knowing how to use C pointers, I’m one step closer to understanding x86
assembly language. As we’ll see next, there are a few important differences
between C and x86 notation which I need to understand carefully. But these are
superficial. It turns out that simply by learning C I’ve also learned a lot
about what my computer’s microprocessor is capable of.&lt;/p&gt;

&lt;p&gt;In a future article I’ll try to figure out &lt;em&gt;why&lt;/em&gt; the x86 instructions above do
what they do &amp;ndash; how my compiler assigns local variables to locations on the
stack, and what the stack is. But for today, let’s focus on the meaning of the
x86 and C pointer notation.&lt;/p&gt;

&lt;h2&gt;A Backwards, Inside Out Array&lt;/h2&gt;

&lt;p&gt;Let’s start with the move instruction that copies 42 into a certain memory
address. Here’s the C translation:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
rbp[&lt;span class="integer"&gt;-1&lt;/span&gt;] = &lt;span class="integer"&gt;42&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This line of code looks simple enough, but actually there are a couple of very
odd things about it. First, I wrote the C array &lt;code&gt;rbp&lt;/code&gt; using the name of a
register in my microprocessor. That is, I’m treating the &lt;code&gt;rbp&lt;/code&gt; register as if it
were a series of values, an array, and not a single value.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/array1.png" width=432&gt;&lt;/p&gt;

&lt;p&gt;Any C programmers reading along might not be surprised by this:
In C an array is really just a pointer to a block of memory and not a
collection of objects or elements like it would be in Python, Ruby or some
other high level language. A recent blog article featured on Hacker News
discusses what arrays really are in C: &lt;a href="https://blog.feabhas.com/2016/12/a-convenient-untruth"&gt;A convenient
untruth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The pointer itself is a number indicating where the memory block is located: a
&lt;em&gt;memory address&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/array2.png" width=800&gt;&lt;/p&gt;

&lt;p&gt;In x86 assembly language, the same move instruction appears this way:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
movl    &lt;span class="global-variable"&gt;$42&lt;/span&gt;, &lt;span class="integer"&gt;-4&lt;/span&gt;(%rbp)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To me, the assembly language syntax is inside out: Instead of writing the array
name followed by the index in brackets, I write the index first, followed by
the array name in parentheses:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/array3.png" width=432&gt;&lt;/p&gt;

&lt;p&gt;The parentheses indicate the move instruction should consider the value in &lt;code&gt;rbp&lt;/code&gt;
to be a memory address, that it should move the value 42 to the memory address
referenced by &lt;code&gt;rbp&lt;/code&gt; (or actually to the memory address four bytes before the
value of &lt;code&gt;rbp&lt;/code&gt;) and not into &lt;code&gt;rbp&lt;/code&gt; itself.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/array4.png" width=432&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the other odd thing about this array is that it uses a negative
index. The &lt;code&gt;movl&lt;/code&gt; instruction copied 42 to a memory address that appeared before
the start of the array &amp;ndash; this array is not only inside-out, it’s backwards!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/array5.png" width=558&gt;&lt;/p&gt;

&lt;p&gt;In a C program, this would be a recipe for disaster. C programmers normally
allocate memory for an array, and then access its elements using a positive (or
zero) index value. Writing to a memory location using a negative index would
overwrite memory located outside of the array, potentially causing a
segmentation fault to occur immediately, or more likely causing my code to
crash or misbehave later when it accessed this overwritten memory value.&lt;/p&gt;

&lt;h2&gt;x86 Array Indices&lt;/h2&gt;

&lt;p&gt;Reading the code above, you probably also noticed I wrote the C array using an
index of -1, while the original x86 move instruction used -4. Why are these
different? Why did I change the index values when I transcribed the assembly
language into C?&lt;/p&gt;

&lt;p&gt;The reason is that x86 assembly language instructions always use byte counts,
while C arrays use an element count index instead. To understand what I mean,
let’s write a C declaration for this imaginary array before using it:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="predefined-type"&gt;unsigned&lt;/span&gt; &lt;span class="predefined-type"&gt;int&lt;/span&gt; rbp[&lt;span class="integer"&gt;100&lt;/span&gt;];
rbp[&lt;span class="integer"&gt;2&lt;/span&gt;] = &lt;span class="integer"&gt;42&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Because C is a statically typed language, I have to declare the type of the
array elements when I declare the array. In this example, &lt;code&gt;unsigned int&lt;/code&gt; is
equivalent to a 32-bit or 4 byte value, the same operand size used by the &lt;code&gt;movl&lt;/code&gt;
instruction. So here I’ve declared &lt;code&gt;rbp&lt;/code&gt; as an array of 100 ints, using a memory
segment containing a total of 4*100=400 bytes.&lt;/p&gt;

&lt;p&gt;Now when I write &lt;code&gt;rbp[2]&lt;/code&gt; in C I access the element at position 2, or the third
element:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/array6.png" width=447&gt;&lt;/p&gt;

&lt;p&gt;But notice that because each int element consists of 4 bytes, the memory
location of &lt;code&gt;rbp+2&lt;/code&gt; is actually 8 bytes larger than &lt;code&gt;rbp&lt;/code&gt;. The index 2 is an
element count: (2 elements) * (4 bytes/element) = 8 bytes.&lt;/p&gt;

&lt;p&gt;x86 assembly language, on the other hand, uses byte indexes. That means to
access the same element in this array, I would write &lt;code&gt;8(%rbp)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/array7.png" width=698&gt;&lt;/p&gt;

&lt;p&gt;When you look at memory this way, from a detailed, physical point of view, the
x86 byte count index makes more sense. &lt;code&gt;8(%rbp)&lt;/code&gt; is the address &lt;code&gt;rbp&lt;/code&gt; points to,
plus 8 bytes. But this isn’t very convenient: Think of all the code you’ve
written that uses arrays and their elements. Normally you don’t want to think
about how many bytes each element uses in memory, and exactly how many bytes
from the start of the array an element is located at. The C style of using an
element count index makes much more sense.&lt;/p&gt;

&lt;p&gt;In the backwards array from my example program, the &lt;code&gt;movl&lt;/code&gt; instruction was
written as:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
movl    &lt;span class="global-variable"&gt;$42&lt;/span&gt;, &lt;span class="integer"&gt;-4&lt;/span&gt;(%rbp)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This means “move the 4 byte long value 42 to a memory location 4 bytes before
the address found in the &lt;code&gt;rbp&lt;/code&gt; register.”&lt;/p&gt;

&lt;p&gt;But in C, I would write&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
rbp[&lt;span class="integer"&gt;-1&lt;/span&gt;] = &lt;span class="integer"&gt;42&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This means “Set the -1st element of the array to 42” &amp;ndash; much more
straightforward (although still a bit weird).&lt;/p&gt;

&lt;h2&gt;Pushing a Value Onto The Stack&lt;/h2&gt;

&lt;p&gt;Next let’s take a look at the first x86 instruction in my program:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
pushq   %rbp  
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This instruction, &lt;code&gt;pushq&lt;/code&gt;, pushes a new value onto the top of the stack. Think of
the stack as just a special array of values in memory. Reading the equivalent C
code makes this a bit easier to follow:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
*--rsp = rbp;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here I wrote the C assignment using explicit pointer syntax: The pointer is the
&lt;code&gt;rsp&lt;/code&gt; or &lt;em&gt;stack pointer&lt;/em&gt; register. The asterisk prefix is C notation for
dereferencing a pointer: &lt;code&gt;*rsp&lt;/code&gt; refers to the value stored at the memory location
&lt;code&gt;rsp&lt;/code&gt; points to, just as if I had written &lt;code&gt;rsp[0]&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/array8.png" width=698&gt;&lt;/p&gt;

&lt;p&gt;Ignoring the minus signs for a moment, the C code &lt;code&gt;*rsp = rbp&lt;/code&gt; means: “copy the
value of &lt;code&gt;rbp&lt;/code&gt; to the memory location whose address is contained in the &lt;code&gt;rsp&lt;/code&gt;
register.”&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/array9.png" width=698&gt;&lt;/p&gt;

&lt;p&gt;What about the minus signs? C programmers will know these indicate the pointer,
in this case &lt;code&gt;rsp&lt;/code&gt;, should be decremented before its value is dereferenced. We
write the minus signs before the pointer because the decrement operation
happens before the pointer’s value is used. This is useful in this scenario
because &lt;code&gt;rsp&lt;/code&gt; will continue to point to the top of the stack.&lt;/p&gt;

&lt;p&gt;Imagine the &lt;code&gt;rsp&lt;/code&gt; pointer starts at &lt;code&gt;0x00007fff5fbff8f8&lt;/code&gt;. This is the top of the
stack, initially:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/array10.png" width=698&gt;&lt;/p&gt;

&lt;p&gt;Then we decrement &lt;code&gt;rsp&lt;/code&gt; so it points to a new top of the stack. The stack grows
downward in x86 programs. Each time we push a value onto the stack we first
decrement the stack pointer:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/array11.png" width=698&gt;&lt;/p&gt;

&lt;p&gt;And then the assignment writes the value of &lt;code&gt;rbp&lt;/code&gt; to the top of the stack, using
&lt;code&gt;rsp&lt;/code&gt; after it has been decremented:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/array12.png" width=698&gt;&lt;/p&gt;

&lt;p&gt;Notice another important detail here: The stack pointer is decremented by 8
bytes, not 4 bytes as above. This is because the values we push onto the stack
in this example are pointers, or 8 byte values. We’ll see why in a moment.&lt;/p&gt;

&lt;p&gt;What about the x86 notation? Pushing a value onto the stack is such a common
operation x86 microprocessors have a special instruction for it: &lt;code&gt;push&lt;/code&gt;.&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
pushq   %rbp  
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Just like with &lt;code&gt;movl&lt;/code&gt;, the “q” suffix indicates how large the operand is, the
size of the value that &lt;code&gt;push&lt;/code&gt; copies to the stack. In this case “q” indicates the
value is a 64 bit or 8 byte value. That’s why each value on the stack in the
diagram above takes 8 bytes. If my program had used the &lt;code&gt;pushl&lt;/code&gt; instruction, then
it would have decremented the stack by only 4 bytes (a “long” instead of a
“quad” value).&lt;/p&gt;

&lt;p&gt;This behavior of automatically adjusting the amount of decrement according to
the operand size is a convenient feature of x86 microprocessors. And it’s also
the origin of the C language &lt;code&gt;--&lt;/code&gt; and &lt;code&gt;++&lt;/code&gt; operators. To see what I mean, take a
second look at the equivalent C assignment code:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
*--rsp = rbp;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What does the &lt;code&gt;--&lt;/code&gt; pre-decrement operator subtract from the pointer &lt;code&gt;rsp&lt;/code&gt;? The
answer is one element. If we imagine I declared &lt;code&gt;rsp&lt;/code&gt; a pointer to an 8 byte long
value:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
unsigned long *rsp;
*--rsp = rbp;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;…then decrementing &lt;code&gt;rsp&lt;/code&gt; will subtract 8 bytes, enough for one unsigned long
value to fit. The &lt;code&gt;--&lt;/code&gt; operator uses the size of the pointer’s referenced type to
determine what value to subtract. And just like the &lt;code&gt;pushq&lt;/code&gt; x86 instruction, the
C &lt;code&gt;--&lt;/code&gt; operator subtracts before the assignment occurs.&lt;/p&gt;

&lt;p&gt;Why does the C &lt;code&gt;--&lt;/code&gt; operator function this way? Because the x86 assembly language
functions in the same way. Because my computer’s microprocessor works that way.
We’re seeing another example of how C’s behavior reflects the behavior and
capability of my computer’s microprocessor.&lt;/p&gt;

&lt;h2&gt;Popping a Value Off The Stack&lt;/h2&gt;

&lt;p&gt;Here’s the last instruction in my example program:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
retq  
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This instruction, &amp;ldquo;return,&amp;rdquo; means the microprocessor should return to the
calling function and continue execution from there. How does it work? Once
again, let’s refer to the equivalent C assignment function to learn more:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
rip = *rsp++;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here the C code copies the value from the memory location referenced by the &lt;code&gt;rsp&lt;/code&gt;
pointer and saves it into the &lt;code&gt;rip&lt;/code&gt; register.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/pop1.png" width=698&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;rip&lt;/code&gt; register is known as the &lt;em&gt;instruction pointer&lt;/em&gt;, which contains a very
special and important value: the memory address of the next instruction my
microprocessor should execute. This instruction copies an older value of &lt;code&gt;rip&lt;/code&gt;
from the stack, and saves it into the &lt;code&gt;rip&lt;/code&gt; register again.&lt;/p&gt;

&lt;p&gt;Each time my program calls a function, the assembly language code saves the
current value of &lt;code&gt;rip&lt;/code&gt; on the stack and then sets &lt;code&gt;rip&lt;/code&gt; to a new value: the
location of the called function. When that function is finished, my program
then retrieves the old value of &lt;code&gt;rip&lt;/code&gt; from the stack, continuing execute from
where it left off at the call site.&lt;/p&gt;

&lt;p&gt;After copying the old value of &lt;code&gt;rip&lt;/code&gt; from the stack, my program has to increment
the &lt;code&gt;rsp&lt;/code&gt; pointer in order to keep the &lt;code&gt;rsp&lt;/code&gt; register pointing to the top of the
stack. And in just the same way &lt;code&gt;pushq&lt;/code&gt; did, &lt;code&gt;retq&lt;/code&gt; uses the “q” suffix to
determine how many bytes to add to the stack pointer after the copy is
finished.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2017/1/20/pop2.png" width=698&gt;&lt;/p&gt;

&lt;p&gt;Now we know where the C &lt;code&gt;++&lt;/code&gt; post-increment operator’s behavior comes from:
assembly language. Just as &lt;code&gt;retq&lt;/code&gt; adds 8 bytes to &lt;code&gt;rsp&lt;/code&gt;, the C expression &lt;code&gt;*rsp++&lt;/code&gt;
adds the size of 1 element to &lt;code&gt;rsp&lt;/code&gt; based on the type of the pointer’s referenced
type:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="predefined-type"&gt;unsigned&lt;/span&gt; &lt;span class="predefined-type"&gt;long&lt;/span&gt; *rsp;
rip = *rsp++;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;Next Time&lt;/h2&gt;

&lt;p&gt;When I have time I&amp;rsquo;d like to write one more post about x86 syntax. Now that
I’ve learned what register prefixes and instruction suffixes mean in x86 code,
and how to write instructions that use register values as memory addresses, I’m
finally ready to read and understand a simple assembly language program. In my
next point I’ll look at how my Crystal and C compilers assign memory addresses
on the stack for local variables, and why they use a stack in the first place.
Should be fun!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Learning to Read x86 Assembly Language</title>
    <link href="http://patshaughnessy.net/2016/11/26/learning-to-read-x86-assembly-language" rel="alternate"/>
    <id>http://patshaughnessy.net/2016/11/26/learning-to-read-x86-assembly-language</id>
    <published>2016-11-26T04:00:00Z</published>
    <updated>2016-11-26T04:00:00Z</updated>
    <category>ruby</category>
    <author>
      <name></name>
    </author>
    <summary type="html">&lt;div style="float: right; padding: 0px 0px 30px 30px; text-align: center; line-height:16px"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/11/26/8086.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;A 16-bit Intel 8086 microprocessor from 1978&lt;br/&gt;
    &lt;small&gt;(source: &lt;a href="https://commons.wikimedia.org/wiki/File:L_intel-c8086.jpg"&gt;RodolfoNeres via Wikimedia Commons&lt;/a&gt;)&lt;/small&gt;&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;Writing assembly language is </summary>
    <content type="html">&lt;div style="float: right; padding: 0px 0px 30px 30px; text-align: center; line-height:16px"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/11/26/8086.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;A 16-bit Intel 8086 microprocessor from 1978&lt;br/&gt;
    &lt;small&gt;(source: &lt;a href="https://commons.wikimedia.org/wiki/File:L_intel-c8086.jpg"&gt;RodolfoNeres via Wikimedia Commons&lt;/a&gt;)&lt;/small&gt;&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;Writing assembly language is something best left for the experts. To write code
that runs directly on your microprocessor you need to know how memory
segmentation works, what the intended use of each register is, how codes
executes in real and protected modes and much, much more. And, of course,
modern compilers will usually produce faster, more optimized code than you ever
could, without making any mistakes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Reading&lt;/em&gt; assembly language, on the other hand, isn’t nearly as difficult and can
be a useful skill to have: Someday you might need to debug code without having
the original source. You’ll begin to understand what a microprocessor can and
can’t do by reading it’s language directly. And you’ll appreciate and
understand your favorite programming language even more after seeing your own
code translated into low level machine instructions.&lt;/p&gt;

&lt;p&gt;But most importantly, learning about assembly language can be a lot of fun.&lt;/p&gt;

&lt;h2&gt;Usually Reading Assembly Language Is No Fun At All&lt;/h2&gt;

&lt;p&gt;Unfortunately, most of us only see assembly language after something has gone
wrong, terribly wrong, when we encounter something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/segfault.png"/&gt;&lt;/p&gt;

&lt;p&gt;This is what a segmentation fault looks like in a debugger. The debugger shows
me assembly language because it doesn’t know what else to show me. A
“segmentation fault” means one of the assembly language instructions, for
example the &lt;span class="code"&gt;movb $0x6c, 0x1(%rax)&lt;/span&gt; line above, has
tried to write to a portion of memory which it is not allowed to.&lt;/p&gt;

&lt;p&gt;It’s no wonder that most of us dislike reading low level code like this. We
only ever see it when we’re in the midst of debugging something, when the
language and tools we normally rely on have let us down. We never see assembly
language under happier circumstances; it is always the bearer of bad news.&lt;/p&gt;

&lt;h2&gt;Converting My Own Code to Assembly Language&lt;/h2&gt;

&lt;p&gt;This week I had some free time and decided to read some assembly language just
for fun. I wanted to read low level code that was working properly, not code
that was overwriting some other process&amp;rsquo;s memory. I wanted to see if I could
understand it like any other programming language. To make things easier, I
decided to translate some of my own code into assembly language so I could
focus on the assembly language syntax. It was easier to figure out what the
instructions meant because I knew what they were doing.&lt;/p&gt;

&lt;p&gt;I’m a Ruby developer, and so I was interested in knowing how my Ruby code would
look translated into assembly language. Unfortunately, the Ruby interpreter (at
least the standard “MRI” version of Ruby) never does this. Instead, the Ruby
interpreter itself is compiled into machine language and runs my code using a
virtual machine. But I wanted to see what a real machine would do, not a
virtual one.&lt;/p&gt;

&lt;p&gt;Instead I decided to use &lt;a href="https://crystal-lang.org"&gt;Crystal&lt;/a&gt;, a variation on
Ruby that uses &lt;a href="http://llvm.org"&gt;LLVM&lt;/a&gt; to compile Ruby to native machine
language before running it. And because the LLVM system can also produce an
assembly language version of the code it produces, using Crystal was the
perfect way for me to see my Ruby code translated so a microprocessor could
understand it.&lt;/p&gt;

&lt;p&gt;I started by writing an extremely simple program that adds 42 to a given
integer:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_forty_two&lt;/span&gt;(n)
  n+&lt;span class="integer"&gt;42&lt;/span&gt;  
&lt;span class="keyword"&gt;end&lt;/span&gt;

puts add_forty_two(&lt;span class="integer"&gt;10&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This was both Ruby code:&lt;/p&gt;

&lt;pre&gt;
$ ruby add_forty_two.rb 
52
&lt;/pre&gt;


&lt;p&gt;And Crystal code:&lt;/p&gt;

&lt;pre&gt;
$ crystal add_forty_two.rb
52
&lt;/pre&gt;


&lt;p&gt;Both produced the same result, of course. But only Crystal could produce a copy
in assembly language: &lt;/p&gt;

&lt;pre&gt;
$ crystal build add_forty_two.rb --emit asm
&lt;/pre&gt;


&lt;p&gt;This created a file called add_forty_two.s which contained 10,000s of lines of
assembly language code. (Most of this was the compiled version of the Crystal
runtime library.) I opened add_forty_two.s in a text editor and searched for
“add_forty_two,” the name of my function. First I found the call site, the code
that calls my add_forty_two function:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/call-site.png"/&gt;&lt;/p&gt;

&lt;p&gt;I’ll return to this a bit later. Searching again I found the x86 assembly
language version of my function:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/code1.png"/&gt;&lt;/p&gt;

&lt;p&gt;Next, I deleted all of the assembler directives, such as &lt;span
class="code"&gt;.globl&lt;/span&gt; and &lt;span class="code"&gt;.cfi_offset.&lt;/span&gt; Someday
it would be interesting to learn about these, but I wanted to focus on the
actual machine instructions. And finally I pasted the the remaining code inside
of my Ruby function.&lt;/p&gt;

&lt;p&gt;Then I saw what my computer actually does when it executes &lt;span
class="code"&gt;add_forty_two&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/code2.png"/&gt;&lt;/p&gt;

&lt;h2&gt;x86 Assembly Language: Almost Easy to Read&lt;/h2&gt;

&lt;p&gt;This code is &lt;em&gt;almost&lt;/em&gt; easy to follow. I can guess what each instruction means:
push, add, move, etc., but I can’t quite follow what’s going on here. &lt;span
class="code"&gt;mov&lt;/span&gt; probably means to move, but what is the computer
moving? And from where to where?&lt;/p&gt;

&lt;div style="float: right; padding: 20px 0px 0px 30px; text-align: center; line-height:16px"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/11/26/budapest.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;Was x86 assembly language designed in Hungary?&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;The problem is that x86 assembly language was designed by Hungarians. I don’t
mean that literally; in fact, I have no idea who designed x86 assembly
language. I mean that x86 code reminds me of the Hungarian language.&lt;/p&gt;

&lt;p&gt;I lived in Budapest for about a year in 1992 and managed to become
conversational in Hungarian, although I’ve forgotten all of it since. A
beautiful language, Hungarian is notoriously difficult for foreigners to learn.
Related only to Finnish and Estonian, its grammar doesn’t resemble Italian,
French or other romance languages; nor does it resemble Russian or any of the
other Slavic languages from Eastern Europe.&lt;/p&gt;

&lt;p&gt;The one bit of Hungarian grammar I still remember is that instead of using
separate words for prepositions, such as inside, outside, etc., you append
different suffixes to the target word. For example “inside the house” would be
&lt;em&gt;a házban&lt;/em&gt;. House is &lt;em&gt;ház&lt;/em&gt; while inside is &lt;em&gt;ban&lt;/em&gt;. Similarly “in Budapest” would
be &lt;em&gt;Budapesten&lt;/em&gt; &amp;ndash; the &lt;em&gt;en&lt;/em&gt; suffix means “in.” x86 assembly language code
reminds me of Hungarian. You don’t use &lt;span class="code"&gt;mov&lt;/span&gt; to move
something; you use &lt;span class="code"&gt;movq&lt;/span&gt;. You don’t &lt;span
class="code"&gt;add&lt;/span&gt; something; you use the &lt;span class="code"&gt;addl&lt;/span&gt;
instruction.&lt;/p&gt;

&lt;p&gt;It turns out x86 assembly is much simpler than Hungarian; there are only a few
simple suffixes that refer to the size of the data you are operating on. Here
are two examples:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/addl1.png"/&gt;&lt;/p&gt;

&lt;p&gt;The &lt;span class="code"&gt;addl&lt;/span&gt; instruction really means “add long,” where
“long” refers to a 4 byte or 32 bit value. In Crystal, it corresponds to the
&lt;span class="code"&gt;Int32&lt;/span&gt; type, which is the default integer type and the
type my &lt;span class="code"&gt;add_forty_two&lt;/span&gt; method uses.&lt;/p&gt;

&lt;p&gt;Here’s another example:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/movq1.png"/&gt;&lt;/p&gt;

&lt;p&gt;The letter &lt;em&gt;q&lt;/em&gt; refers to a “quad” word, or an 8 byte or 64 bit value. Most x86
code these days works with 64 bit or 32 bit values, so you’ll most often see
instructions that end with &lt;em&gt;q&lt;/em&gt; or &lt;em&gt;l&lt;/em&gt;. Other suffixes are &lt;em&gt;w&lt;/em&gt; for word (16 bits
or 2 bytes) or &lt;em&gt;b&lt;/em&gt; for 1 byte or 8 bits.&lt;/p&gt;

&lt;h2&gt;x86 Registers&lt;/h2&gt;

&lt;p&gt;But what about all of the operands of the instructions? Why do they all have a
&amp;ldquo;%&amp;rdquo; prefix, such as &lt;span class="code"&gt;%rsp&lt;/span&gt; or &lt;span
class="code"&gt;%edi&lt;/span&gt;? Reading x86 assembly language also reminds me of
reading Perl code. Lots of punctuation symbols for no apparent reason.  Similar
to Perl, x86 assembly language uses &lt;em&gt;sigils&lt;/em&gt; or magical punctuation characters
to indicate the type of each operand value.&lt;/p&gt;

&lt;p&gt;Here are my two example instructions again:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/addl2.png"/&gt;&lt;/p&gt;

&lt;p&gt;Here the &amp;ldquo;$&amp;rdquo; symbol means the 42 is a literal or “immediate” value. As you
might guess, this is the line of code that adds 42 to something. But what does
it add it to? From the &amp;ldquo;%&amp;rdquo; character we can see the x86 code is adding 42 to
the &lt;span class="code"&gt;edi&lt;/span&gt; register.&lt;/p&gt;

&lt;p&gt;And what is a register? In a nutshell, the microprocessor inside your computer
uses registers to hold values while your code is running. So the instruction
above adds 42 to whatever value is contained in the &lt;span
class="code"&gt;edi&lt;/span&gt; register, and saves it back into &lt;span
class="code"&gt;edi&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the second example again:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/movq2.png"/&gt;&lt;/p&gt;

&lt;p&gt;This instruction, &lt;span class="code"&gt;movq&lt;/span&gt;, refers to two registers:
&lt;span class="code"&gt;rsp&lt;/span&gt; and &lt;span class="code"&gt;rbp&lt;/span&gt;. As you can
guess, it moves whatever value is found in the &lt;span class="code"&gt;rsp&lt;/span&gt;
register to the &lt;span class="code"&gt;rbp&lt;/span&gt; register.&lt;/p&gt;

&lt;p&gt;How many registers are there? What are they called? Let’s look at them using
LLDB:&lt;/p&gt;

&lt;pre&gt;
(lldb) register read
General Purpose Registers:
       rax = 0x0000000100300268
       rbx = 0x0000000000000000
       rcx = 0x00007fffd8132201  libsystem_kernel.dylib`__shmsys + 9
       rdx = 0x0000000000000000
       rdi = 0x000000000000000a
       rsi = 0x00007fff5fbff898
       rbp = 0x00007fff5fbffa30
       rsp = 0x00007fff5fbff908
        r8 = 0x0000000100014b60  add`sigfault_handler
        r9 = 0x0000000100400000
       r10 = 0x0000000000000000
       r11 = 0x0000000000000206
       r12 = 0x0000000000000000
       r13 = 0x0000000000000000
       r14 = 0x0000000000000000
       r15 = 0x0000000000000000
       rip = 0x0000000100013cd0  add`*add_forty_two&lt;Int32&gt;:Int32
    rflags = 0x0000000000000202
        cs = 0x000000000000002b
        fs = 0x0000000000000000
        gs = 0x0000000000000000
&lt;/pre&gt;


&lt;p&gt;You can see there are over 20 registers inside my Mac’s Intel CPU, each
containing a 64 bit or 8 byte value. LLDB shows the values in hexadecimal. I
don’t have time today to explain what all of these registers are used for, but
here are a few highlights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="code"&gt;rax&lt;/span&gt;, &lt;span class="code"&gt;rbx&lt;/span&gt;, &lt;span
class="code"&gt;rcx&lt;/span&gt; and &lt;span class="code"&gt;rdx&lt;/span&gt; are general purpose
registers used to hold on to intermediate values loaded from memory or used
during a calculation of some kind.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="code"&gt;rsp&lt;/span&gt; is the stack pointer, which holds the memory
location of the top of the stack.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="code"&gt;rbp&lt;/span&gt; is the base pointer, which holds the memory
location of the base of the current stack frame&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="code"&gt;rip&lt;/span&gt; is the instruction pointer, which holds the
memory location of the next instruction to execute&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and &lt;span class="code"&gt;rflags&lt;/span&gt; holds a series of flags, used by
comparison instructions for example.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In fact, there are many more registers in a modern x86 microprocessor; LLDB is
only showing me the most commonly used registers. For a complete explanation,
the definitive guide to all of this is the &lt;a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html"&gt;Intel Software Developer’s
Manual&lt;/a&gt;.
Fortunately, my function’s assembly language code only uses a few registers. I
don’t need to understand them all.&lt;/p&gt;

&lt;div style="padding: 30px 0px 30px 0px; text-align: center; line-height:16px"&gt;
&lt;img src="http://patshaughnessy.net/assets/2016/11/26/registers.svg"/&gt;
&lt;i&gt;Registers available in the x86 instruction set&lt;br/&gt;
    &lt;small&gt;(source: &lt;a href="https://commons.wikimedia.org/wiki/File:Table_of_x86_Registers_svg.svg"&gt;Immae via Wikimedia Commons&lt;/a&gt;)&lt;/small&gt;&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;But wait a minute. Why does my &lt;span class="code"&gt;addl&lt;/span&gt; instruction refer
to the &lt;span class="code"&gt;edi&lt;/span&gt; register? This isn’t in the list of
registers shown by LLDB. Where does this add operation occur? What register
does it use?&lt;/p&gt;

&lt;p&gt;It’s those Hungarian designers again. It turns out that x86 assembly language
also decorates the register names to indicate their sizes, similar to what we
saw above with the instruction name suffixes. But for register names x86 syntax
uses prefixes, not suffixes. (In C programming &lt;em&gt;Hungarian notation&lt;/em&gt; actually
refers to the practice of using prefixes on variable names to indicate their
type.)&lt;/p&gt;

&lt;p&gt;What? This is a crazy! Why would any programming language use prefixes to
indicate data size in one place, but then use suffixes to indicate the same
thing somewhere else?  To understand this, you have to remember that assembly
language syntax wasn’t developed overnight. Instead, it gradually evolved of
the course of many years. Originally, the registers used simple two letter
names: &lt;span class="code"&gt;ax&lt;/span&gt;, &lt;span class="code"&gt;bx&lt;/span&gt;, &lt;span
class="code"&gt;cx&lt;/span&gt;.  &lt;span class="code"&gt;dx&lt;/span&gt;, &lt;span
class="code"&gt;sp&lt;/span&gt; and &lt;span class="code"&gt;ip&lt;/span&gt;. These were the
registers on the original 8086 16-bit microprocessor from the 1970s. Later in
the 1980s when Intel built 32 bit microprocessors, starting with the 80386,
they renamed (or &lt;em&gt;extended&lt;/em&gt;) the &lt;span class="code"&gt;ax&lt;/span&gt;, &lt;span
class="code"&gt;bx&lt;/span&gt;, &lt;span class="code"&gt;cx&lt;/span&gt;, etc., registers to become
&lt;span class="code"&gt;eax&lt;/span&gt;, &lt;span class="code"&gt;ebx&lt;/span&gt;, &lt;span
class="code"&gt;ecx&lt;/span&gt;, etc. These were later renamed again to &lt;span
class="code"&gt;rax&lt;/span&gt;, &lt;span class="code"&gt;rbx&lt;/span&gt; etc. for 64-bit
processors.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/register.png"/&gt;&lt;/p&gt;

&lt;p&gt;As you can see here, even today x86 assembly code can refer to the same
register using many different names, for example &lt;span class="code"&gt;al&lt;/span&gt;
or &lt;span class="code"&gt;ah&lt;/span&gt; for 8-bits, &lt;span class="code"&gt;ax&lt;/span&gt; bit 16
bits, &lt;span class="code"&gt;eax&lt;/span&gt; for 32 bits and &lt;span
class="code"&gt;rax&lt;/span&gt; for 64 bits.&lt;/p&gt;

&lt;h2&gt;x86 Assembly Language: Reads Left to Right, Except When It Reads Right to Left&lt;/h2&gt;

&lt;p&gt;Returning to the move instruction from above, how do we know which way the move
happens?&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/movq2.png"/&gt;&lt;/p&gt;

&lt;p&gt;That is, does this instruction move data from &lt;span class="code"&gt;rsp&lt;/span&gt; to
&lt;span class="code"&gt;rbp&lt;/span&gt;? Or from &lt;span class="code"&gt;rbp&lt;/span&gt; to &lt;span
class="code"&gt;rsp&lt;/span&gt;?  Does it read left to right, or right to left?&lt;/p&gt;

&lt;p&gt;It could be either! It turns out there are two versions of x86
syntax: &amp;ldquo;AT&amp;amp;T or GNU Assembler (GAS)&amp;rdquo; syntax, which I’ve been using until now,
and also &amp;ldquo;Intel&amp;rdquo; syntax. GAS reads left to right:&lt;/p&gt;

&lt;div style="padding: 30px 0px 30px 0px; line-height:16px; width: 300px"&gt;
&lt;img src="http://patshaughnessy.net/assets/2016/11/26/movq3.png"/&gt;&lt;br/&gt;
&lt;center&gt;&lt;i&gt;AT&amp;T/GAS syntax&lt;/i&gt;&lt;/center&gt;
&lt;/div&gt;


&lt;p&gt;But equally valid and common is the Intel syntax, which reads right to left:&lt;/p&gt;

&lt;div style="padding: 30px 0px 30px 0px; line-height:16p; width: 300px"&gt;
&lt;img src="http://patshaughnessy.net/assets/2016/11/26/movq4.png"/&gt;&lt;br/&gt;
&lt;center&gt;&lt;i&gt;Intel syntax&lt;/i&gt;&lt;/center&gt;
&lt;/div&gt;


&lt;p&gt;If you see Perl-like sigils (&lt;span class="code"&gt;%rsp&lt;/span&gt; and &lt;span
class="code"&gt;%rbp&lt;/span&gt; for example) then you’re reading GAS syntax and values
will move from left to right. If you don’t see any &amp;ldquo;%&amp;rdquo; or &amp;ldquo;$&amp;rdquo; signs, then you
have Intel syntax and values move right to left. Also notice the Intel syntax
doesn’t append “q” or “l” on to the instruction names. &lt;a href="http://www.imada.sdu.dk/Courses/DM18/Litteratur/IntelnATT.htm"&gt;This
article&lt;/a&gt; does a
great job explaining the differences between the two styles.&lt;/p&gt;

&lt;p&gt;What a train wreck! It’s hard to imagine a more confusing state of affairs. But
again, remember all of this has evolved over the course of 40 years. It wasn’t
designed by any single person at any one time. There’s a tremendous amount of
history behind each x86 assembly language instruction.&lt;/p&gt;

&lt;h2&gt;Executing My Simple Program&lt;/h2&gt;

&lt;p&gt;Now that I understand the basics of x86 assembly language syntax, I’m ready to
return to my &lt;span class="code"&gt;add_forty_two&lt;/span&gt; code and to try to
understand how it works. Here it is again:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/code2.png"/&gt;&lt;/p&gt;

&lt;p&gt;Reading the 6 instructions inside of &lt;span class="code"&gt;add_forty_two&lt;/span&gt;,
there are three different operations going on. First, we setup a new stack
frame for our function:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/code3.png"/&gt;&lt;/p&gt;

&lt;p&gt;The stack frame is an area of memory that my code can use to save local
variable and other information. I won’t spend time on this today because my
code is so simple it doesn’t use any local variables. The last two instructions
clean up this stack frame and return to the calling code:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/code4.png"/&gt;&lt;/p&gt;

&lt;p&gt;I won’t cover this today either. In my next article, I’ll go through a slightly
more complicated example containing local variables and explain how x86
assembly code accesses them on the stack.&lt;/p&gt;

&lt;p&gt;For today, I want to focus on the two instructions in the middle which actually
implement &lt;span class="code"&gt;add_forty_two&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/code5.png"/&gt;&lt;/p&gt;

&lt;p&gt;We’re down to two assembly language instructions, but it’s still far from
obvious what this code means! The key to understanding these two instructions
is to realize that the argument to my function, &lt;span class="code"&gt;n&lt;/span&gt;, is
passed in using a register:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/code6.png"/&gt;&lt;/p&gt;

&lt;p&gt;We can see this is true by returning to the call site in the &lt;span
class="code"&gt;add_forty_two.s&lt;/span&gt; file, to the code which calls my function:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/call-site.png"/&gt;&lt;/p&gt;

&lt;p&gt;Note how the first &lt;span class="code"&gt;movl&lt;/span&gt; instruction copies the value
10 into the &lt;span class="code"&gt;edi&lt;/span&gt; register (the lower 32 bits of the
&lt;span class="code"&gt;rdi&lt;/span&gt; register):&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/code7.png"/&gt;&lt;/p&gt;

&lt;p&gt;Next the &lt;span class="code"&gt;callq&lt;/span&gt; instruction calls my function with 10
in &lt;span class="code"&gt;edi&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/code8.png"/&gt;&lt;/p&gt;

&lt;p&gt;So when the &lt;span class="code"&gt;addl&lt;/span&gt; instruction runs, it will add 42 to
the argument 10.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/code9.png"/&gt;&lt;/p&gt;

&lt;p&gt;Next, the &lt;span class="code"&gt;movl&lt;/span&gt; instruction runs and copies the result
52 from &lt;span class="code"&gt;edi&lt;/span&gt; to &lt;span class="code"&gt;eax&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/code10.png"/&gt;&lt;/p&gt;

&lt;p&gt;This, in turn, becomes the return value from my function:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/code11.png"/&gt;&lt;/p&gt;

&lt;p&gt;Again, we can see this is the case by reading the call site code again:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/11/26/call-site.png"/&gt;&lt;/p&gt;

&lt;p&gt;What happens after &lt;span class="code"&gt;add_forty_two&lt;/span&gt; returns? It moves
&lt;span class="code"&gt;%eax&lt;/span&gt;, the return value, to &lt;span
class="code"&gt;%edi&lt;/span&gt; where it becomes the argument to a second function
call, the call to &lt;span class="code"&gt;puts&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;I’m not sure whether this pattern of using the &lt;span class="code"&gt;%edi&lt;/span&gt;
and &lt;span class="code"&gt;%eax&lt;/span&gt; registers to hold the function arguments and
return values is a x86 standard convention. My guess is that instead it’s a
pattern the LLVM code generator uses. It may be that LLVM only uses this
technique for a single argument and single return value function like &lt;span
class="code"&gt;add_forty_two&lt;/span&gt;.&lt;/p&gt;

&lt;h2&gt;Next Time&lt;/h2&gt;

&lt;p&gt;I haven’t done much, but already I’m beginning to understand x86 assembly
language. Almost unintelligible when I first saw it, now I can start to follow
what the machine instructions do when my code is executed. The key was learning
how the instruction and register names change depending on the size of the
value they operate on.&lt;/p&gt;

&lt;p&gt;There’s much more to learn, of course. In my next article I’ll take a look at
how an x86 microprocessor uses the stack to save values, and how this maps to
Ruby using a slightly more complex example. Along the way I’ll learn about a
few more important syntax rules of x86 assembly language.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Need a Second Opinion on Your Ruby Code? Ask Crystal</title>
    <link href="http://patshaughnessy.net/2016/10/7/need-a-second-opinion-on-your-ruby-code-ask-crystal" rel="alternate"/>
    <id>http://patshaughnessy.net/2016/10/7/need-a-second-opinion-on-your-ruby-code-ask-crystal</id>
    <published>2016-10-07T03:00:00Z</published>
    <updated>2016-10-07T03:00:00Z</updated>
    <category>ruby</category>
    <author>
      <name></name>
    </author>
    <summary type="html">&lt;div style="float: left; padding: 0px 30px 0px 0px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/10/7/x-ray1.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;Running the Crystal compiler on your Ruby code&lt;br/&gt;is like asking a second doctor for their opinion.&lt;/i&gt;&lt;br/&gt;
&lt;/div&gt;


&lt;p&gt;When it comes to your health, you don’t hesitate to get a second opinion.
Doctors don’t always agree, and a second doctor’s app</summary>
    <content type="html">&lt;div style="float: left; padding: 0px 30px 0px 0px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/10/7/x-ray1.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;Running the Crystal compiler on your Ruby code&lt;br/&gt;is like asking a second doctor for their opinion.&lt;/i&gt;&lt;br/&gt;
&lt;/div&gt;


&lt;p&gt;When it comes to your health, you don’t hesitate to get a second opinion.
Doctors don’t always agree, and a second doctor’s appointment is always time
well spent when it comes to staying healthy.&lt;/p&gt;

&lt;p&gt;But what about your code? A code review is similar to going to see a doctor:
Someone examines your code, looks for potential problems and hopefully gives
you some advice you can take away. Sadly, however, we don’t always have the
time or opportunity for a real code review.&lt;/p&gt;

&lt;p&gt;Recently I’ve been learning about the &lt;a href="https://crystal-lang.org"&gt;Crystal programming
language&lt;/a&gt;, a variation on Ruby syntax implemented on
the &lt;a href="http://llvm.org"&gt;LLVM platform&lt;/a&gt;. What’s interesting about Crystal is that
it uses static types while at the same time retaining much of Ruby’s original
elegance and natural feel. The two languages are so similar, in fact, it’s
possible to use the Crystal compiler to parse your Ruby code after making just
a few superficial changes. This can be a great way to get helpful feedback on
your Ruby code, a free code review from a dramatically different perspective.&lt;/p&gt;

&lt;p&gt;Using a compiler for one language on code from another sounds crazy. Will it
really work? To find out, let’s look at a simple example.&lt;/p&gt;

&lt;h2&gt;Rock Stars&lt;/h2&gt;

&lt;p&gt;Here’s a Ruby class that represents the lead singer of a rock band, and a
couple of methods that use it:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Singer&lt;/span&gt;

  attr_reader &lt;span class="symbol"&gt;:band&lt;/span&gt;, &lt;span class="symbol"&gt;:first_name&lt;/span&gt;, &lt;span class="symbol"&gt;:last_name&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(band, first_name, last_name)
    &lt;span class="instance-variable"&gt;@band&lt;/span&gt; = band
    &lt;span class="instance-variable"&gt;@first_name&lt;/span&gt; = first_name
    &lt;span class="instance-variable"&gt;@last_name&lt;/span&gt; = last_name
  &lt;span class="keyword"&gt;end&lt;/span&gt; 

&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;lead_singer_for&lt;/span&gt;(band, singers)
  singers.find{|s| s.band == band}
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;longest_last_name&lt;/span&gt;(singers)
  singers.map{|s| s.last_name}.max_by{|name| name.size }
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is similar to Ruby code I write everyday: small classes containing a few
instance variables, and short, simple methods. With some test data we can try
out this code to see if it works:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
lead_singers = [ 
  &lt;span class="constant"&gt;Singer&lt;/span&gt;.new(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;The Rolling Stones&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Mick&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Jagger&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="constant"&gt;Singer&lt;/span&gt;.new(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Queen&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Freddie&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Mercury&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="constant"&gt;Singer&lt;/span&gt;.new(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;The Doors&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Jim&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Morrison&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
]

singer = lead_singer_for(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;The Doors&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, lead_singers)
puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;singer.first_name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;singer.last_name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="comment"&gt;# =&amp;gt; Jim Morrison&lt;/span&gt;

puts longest_last_name(lead_singers)
&lt;span class="comment"&gt;# =&amp;gt; Morrison&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Everything works well. On a real project I’d express this as a series of
Minitest expectations, and seeing green I’d go ahead and check it into Git on a
branch and ask a colleague for a code review.&lt;/p&gt;

&lt;p&gt;But what if no one is around or even awake in my time zone? Or what if I’m
working alone on this? Well, I’d have to review my own code alone.&lt;/p&gt;

&lt;h2&gt;Code Reviewing Yourself&lt;/h2&gt;

&lt;p&gt;I believe in the medical world doctors have a legal or at least an ethical
prohibition on treating themselves, for obvious reasons. And just as giving
yourself a physical exam makes no sense, reviewing your own code doesn’t
either. You don’t have perspective on what you wrote, especially just after you
finish writing it. Usually a fresh pair of eyes will see mistakes that you
can’t see.&lt;/p&gt;

&lt;p&gt;But in this case I have no choice &amp;ndash; I decide to review my own code before
checking it in. And right away I find a problem: I call &lt;code&gt;find&lt;/code&gt; but never consider
whether the return value could be &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;lead_singer_for&lt;/span&gt;(band, singers)
  singers.find{|s| s.band == band}
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In my test, I happened to pick a band name that existed in the test data set,
but if I misspell it or look for a different band, I would get an error:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
singer = lead_singer_for(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Doors&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, lead_singers)
puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;singer.first_name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;singer.last_name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="comment"&gt;# =&amp;gt; undefined method `first_name' for nil:NilClass (NoMethodError)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I make this sort of mistake quite often, actually. In fact, I do it so often
that checking for &lt;code&gt;nil&lt;/code&gt; after calling &lt;code&gt;find&lt;/code&gt; is part of my mental checklist for
code reviews.&lt;/p&gt;

&lt;h2&gt;Superficial Syntax Differences: Crystal vs. Ruby&lt;/h2&gt;

&lt;p&gt;But suppose I was tired or in a rush; I might not have noticed the call to
&lt;code&gt;find&lt;/code&gt;. And often forgetting to check for a &lt;code&gt;nil&lt;/code&gt; return value isn’t as obvious as
it is here in this example. What if there was a way to find code issues the
Ruby interpreter doesn’t report? Imagine if this code review could happen before
my code is ever deployed or used?&lt;/p&gt;

&lt;p&gt;There is; we just need to run my Ruby code through the Crystal compiler:&lt;/p&gt;

&lt;pre class="console"&gt;
$ cp lead_singers.rb lead_singers.cr
$ crystal lead_singers.cr
&lt;/pre&gt;


&lt;p&gt;What? Pat, this is nuts. Crystal, while superficially similar to Ruby, is a
very different language. How in the world can I use a compiler written for one
language on code written in another?&lt;/p&gt;

&lt;p&gt;Well, you’re right. I run into a syntax error immediately:&lt;/p&gt;

&lt;pre class="console"&gt;
$ crystal lead_singers.cr 
Syntax error in ./lead_singers.cr:27: unterminated char literal, use double quotes for strings

singer = lead_singer_for('Doors', lead_singers)
                         ^
&lt;/pre&gt;


&lt;p&gt;The most common difference of all between Crystal and Ruby is that Crystal uses
only double quotes for string literals, while Ruby allows either single or
double quotes. (&lt;a href="https://www.viget.com/articles/just-use-double-quoted-ruby-strings"&gt;Some people
think&lt;/a&gt; Ruby
should limit us to double quotes also.) A quick search and replace solves this
problem:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
singer = lead_singer_for(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Doors&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, lead_singers)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let’s compile again:&lt;/p&gt;

&lt;pre class="console"&gt;
$ crystal lead_singers.cr 
Error in ./lead_singers.cr:3: undefined method 'attr_reader'

  attr_reader :band, :first_name, :last_name
  ^~~~~~~~~~~
&lt;/pre&gt;


&lt;p&gt;We’ve run into another difference: Crystal uses the &lt;code&gt;property&lt;/code&gt; keyword
(actually a macro) instead of &lt;code&gt;attr_reader&lt;/code&gt;, &lt;code&gt;attr_writer&lt;/code&gt; and &lt;code&gt;attr_accessor&lt;/code&gt;.
Easy enough to fix:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Singer&lt;/span&gt;

  property &lt;span class="symbol"&gt;:band&lt;/span&gt;, &lt;span class="symbol"&gt;:first_name&lt;/span&gt;, &lt;span class="symbol"&gt;:last_name&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(band, first_name, last_name)
    &lt;span class="instance-variable"&gt;@band&lt;/span&gt; = band
    &lt;span class="instance-variable"&gt;@first_name&lt;/span&gt; = first_name
    &lt;span class="instance-variable"&gt;@last_name&lt;/span&gt; = last_name
  &lt;span class="keyword"&gt;end&lt;/span&gt; 

&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let’s try again. Compiling my Ruby code using Crystal for a third time, I
get:&lt;/p&gt;

&lt;pre class="console"&gt;
$ crystal lead_singers.cr
Error in ./lead_singers.cr:22: instantiating 'Singer:Class#new(String, String, String)'

  Singer.new("The Rolling Stones", "Mick", "Jagger"),
         ^~~

instantiating 'Singer#initialize(String, String, String)'

in ./lead_singers.cr:6: Can't infer the type of instance variable '@band' of Singer

The type of a instance variable, if not declared explicitly with
`@band : Type`, is inferred from assignments to it across
the whole program.

The assignments must look like this:

  1. `@band = 1` (or other literals), inferred to the literal's type
  2. `@band = Type.new`, type is inferred to be Type
  3. `@band = Type.method`, where `method` has a return type
     annotation, type is inferred from it
  4. `@band = arg`, with 'arg' being a method argument with a
     type restriction 'Type', type is inferred to be Type
  5. `@band = arg`, with 'arg' being a method argument with a
     default value, type is inferred using rules 1, 2 and 3 from it
  6. `@band = uninitialized Type`, type is inferred to be Type
  7. `@band = LibSome.func`, and `LibSome` is a `lib`, type
     is inferred from that fun.
  8. `LibSome.func(out @band)`, and `LibSome` is a `lib`, type
     is inferred from that fun argument.

Other assignments have no effect on its type.

Can't infer the type of instance variable '@band' of Singer

    @band = band
    ^~~~~
&lt;/pre&gt;


&lt;p&gt;Oh my God, I’ve made a mistake so terrible the Crystal compiler has given me an
error message an entire page long! This is never going to work.  As you might
guess, I’ve fixed all of the superficial syntax issues. Now my Ruby code is
essentially Crystal code. This error is telling me I haven’t picked a type for
one of my instance variables, which I’ll do next.&lt;/p&gt;

&lt;p&gt;But let’s stop for a moment to review what I’ve changed so far:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, I replaced single quotes with double quotes for all of my string literals.&lt;/li&gt;
&lt;li&gt;Then, I changed &lt;code&gt;attr_reader&lt;/code&gt; to &lt;code&gt;property&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There are a few other superficial differences you’ll run into between Ruby and
Crystal. Here are a few more I’ve come across:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;include?&lt;/code&gt; is called &lt;code&gt;includes?&lt;/code&gt; in Crystal. This reads better in English, but I
suppose Crystal looses a bit of that charming Japanese style we’ve come to
love in Ruby.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Symbol#to_proc&lt;/code&gt; syntax doesn’t work in Crystal, for example &lt;code&gt;map(&amp;amp;:method)&lt;/code&gt;.
Instead they’ve invented a new syntax for that idiom which doesn’t exist in
Ruby: &lt;code&gt;map(&amp;amp;.method)&lt;/code&gt;. &lt;a href="https://crystal-lang.org/2013/09/15/to-proc.html"&gt;The Crystal team explains
why&lt;/a&gt; on their blog.&lt;/li&gt;
&lt;li&gt;Declaring an empty array &lt;code&gt;[]&lt;/code&gt; or hash &lt;code&gt;{}&lt;/code&gt; requires a type definition, like
this: &lt;code&gt;[] of Int32&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The syntax changes I had to deal with are quite small. In fact, it’s amazing
the two languages are so similar. In just a few minutes I can change my code
from Ruby, a dynamic language running with an interpreter, to Crystal, a
statically typed language that compiles to LLVM byte code and later native
machine language.&lt;/p&gt;

&lt;h2&gt;Think About Which Types to Use&lt;/h2&gt;

&lt;div style="float: right; padding: 0px 0px 50px 30px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/10/7/x-ray2.png"&gt;&lt;br/&gt;
  &lt;i&gt;Like an X-Ray, Crystal can find problems with&lt;br/&gt; your Ruby code hidden underneath the surface.&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;Of course, now that I’m using a language with static types I have to pick types
for my variables. If you&amp;rsquo;ve ever used an older, statically typed language like
Java or C, you know how tedious and verbose this can be. In fact, avoiding
static types is why many of us started to use Ruby in the first place.&lt;/p&gt;

&lt;p&gt;But one of Crystal’s strengths is that it can guess which type to use for each
value in your code based on a series of rules. I don’t have to explicitly write
the type for every variable, method argument or return value in my code. This
might even be a preview of &lt;a href="http://confreaks.tv/videos/rubyconf2014-opening-keynote"&gt;how Ruby might work in the
future&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, in some cases Crystal can’t guess which type to use. That’s what
happened here. Take the time to read through the page-long error message; it’s
quite helpful. It explains all of the patterns the Crystal compiler looked for
in my code, &lt;code&gt;@band = 1&lt;/code&gt;, &lt;code&gt;@band = Type.new&lt;/code&gt; etc. But because my assignment &lt;code&gt;@band =
band&lt;/code&gt; didn’t fall into any of these categories, Crystal couldn’t figure out what
type of value &lt;code&gt;@band&lt;/code&gt; represents:&lt;/p&gt;

&lt;pre class="console"&gt;
in ./lead_singers.cr:6: Can't infer the type of instance variable '@band' of Singer
&lt;/pre&gt;


&lt;p&gt;To fix this, I’ll just declare the type of my &lt;code&gt;@band&lt;/code&gt; variable right where I
declare it, along with my two other instance variables:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Singer&lt;/span&gt;

  property band : &lt;span class="constant"&gt;String&lt;/span&gt;
  property first_name : &lt;span class="constant"&gt;String&lt;/span&gt;
  property last_name : &lt;span class="constant"&gt;String&lt;/span&gt;
    
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(band, first_name, last_name)
    &lt;span class="instance-variable"&gt;@band&lt;/span&gt; = band 
    &lt;span class="instance-variable"&gt;@first_name&lt;/span&gt; = first_name
    &lt;span class="instance-variable"&gt;@last_name&lt;/span&gt; = last_name
  &lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;end&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice here I use &lt;code&gt;property&lt;/code&gt; three times, specifying each variable’s
name and type. My three variables, &lt;code&gt;band&lt;/code&gt;, &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; are all
strings, so I just need to tell Crystal this using a more verbose declaration.&lt;/p&gt;

&lt;p&gt;Now we should be good to go! Let&amp;rsquo;s try compiling again:&lt;/p&gt;

&lt;pre class="console"&gt;
$ crystal lead_singers.cr         
Error in ./lead_singers.cr:30: undefined method 'first_name' for Nil (compile-time type
is (Singer | Nil))

puts "#{singer.first_name} #{singer.last_name}"
               ^~~~~~~~~~

================================================================================

Nil trace:

  ./lead_singers.cr:29

    singer = lead_singer_for("Doors", lead_singers)
    ^~~~~~

  ./lead_singers.cr:29

    singer = lead_singer_for("Doors", lead_singers)
             ^~~~~~~~~~~~~~~

  ./lead_singers.cr:15

    def lead_singer_for(band, singers)
        ^~~~~~~~~~~~~~~

  ./lead_singers.cr:16

      singers.find{|s| s.band == band}
              ^~~~

  /Users/pat/bllvm/crystal/src/enumerable.cr:228

      def find(if_none = nil)


  /Users/pat/bllvm/crystal/src/enumerable.cr:232

        if_none
        ^~~~~~~

  /Users/pat/bllvm/crystal/src/enumerable.cr:228

      def find(if_none = nil)
                         ^
&lt;/pre&gt;


&lt;p&gt;Ugh; more trouble. Another page-long error message. Maybe I should just forget
all about Crystal and go back to writing Ruby.&lt;/p&gt;

&lt;h2&gt;Understanding a Crystal Nil Trace&lt;/h2&gt;

&lt;p&gt;Instead, I decide to take some time to understand what Crystal is telling me. I
focus at the beginning of the Crystal error message:&lt;/p&gt;

&lt;pre class="console"&gt;
Error in ./lead_singers.cr:30: undefined method 'first_name' for Nil (compile-time type
is (Singer | Nil))

puts "#{singer.first_name} #{singer.last_name}"
               ^~~~~~~~~~
&lt;/pre&gt;


&lt;p&gt;This looks unfamiliar to me, a Ruby developer, at first. The message is similar
to the error I saw earlier in Ruby when I didn’t check the return value for
&lt;code&gt;find&lt;/code&gt;. Recall that was “undefined method `first_name' for nil:NilClass
(NoMethodError)”. Crystal seems to be telling me the same thing: “undefined
method &amp;lsquo;first_name&amp;rsquo; for Nil.”&lt;/p&gt;

&lt;p&gt;And it is. But instead of giving me a runtime exception, Crystal is giving me a
compile time error based on types. Ruby didn’t report the problem until I ran
my Ruby code, when Ruby actually tried to call the &lt;code&gt;first_name&lt;/code&gt; method on the
&lt;code&gt;NilClass&lt;/code&gt; class. But Crystal’s compiler has found the problem before my code was
ever run. It knows the &lt;code&gt;Nil&lt;/code&gt; class doesn’t have a &lt;code&gt;first_name&lt;/code&gt; method at compile
time.&lt;/p&gt;

&lt;p&gt;But why does Crystal think there is a &lt;code&gt;Nil&lt;/code&gt; class in my code? I just told it my
three instance variables are strings:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
  property band : &lt;span class="constant"&gt;String&lt;/span&gt;
  property first_name : &lt;span class="constant"&gt;String&lt;/span&gt;
  property last_name : &lt;span class="constant"&gt;String&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What the Crystal compiler did is quite interesting! While compiling my code, it
saw that I use the &lt;code&gt;@band&lt;/code&gt; instance variable in the &lt;code&gt;lead_singer_for&lt;/code&gt; method:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;lead_singer_for&lt;/span&gt;(band, singers)
  singers.find{|s| s.band == band}
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Internally, the Crystal compiler now has to decide what type &lt;code&gt;lead_singer_for&lt;/code&gt;
returns. That’s obvious, isn’t it? It should return a &lt;code&gt;Singer&lt;/code&gt;. The call to &lt;code&gt;find&lt;/code&gt;
returns a &lt;code&gt;Singer&lt;/code&gt; object, the first element of the &lt;code&gt;singers&lt;/code&gt; array which matches
the band, the element for which the block returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But what if the band name doesn’t match any singers? What if the block never
returns &lt;code&gt;true&lt;/code&gt; for any element in the array? As we know from Ruby, in that case
&lt;code&gt;lead_singer_for&lt;/code&gt; would return &lt;code&gt;nil&lt;/code&gt;. So &lt;code&gt;lead_singer_for&lt;/code&gt; might return &lt;code&gt;nil&lt;/code&gt; or it
might return a singer.&lt;/p&gt;

&lt;p&gt;Crystal’s type system has a solution for this situation: a &lt;a href="https://crystal-lang.org/2013/09/23/type-inference-part-1.html"&gt;union
type&lt;/a&gt;.
Crystal decides &lt;code&gt;lead_singer_for&lt;/code&gt; returns a &lt;code&gt;(Singer | Nil)&lt;/code&gt; type, which it
mentions in the error message. Now when I use this return value, Crystal’s
compiler knows to check whether the &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; methods are
defined for every class in that union type: &lt;code&gt;Singer&lt;/code&gt; and &lt;code&gt;Nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The rest of the long error message is known as a “Nil trace.” To help us
understand what is wrong, Crystal backtracks through the code starting from
where the missing method was found to where the offending type was introduced.
You can read the Nil trace above for yourself. It starts with:&lt;/p&gt;

&lt;pre class="console"&gt;
 ./lead_singers.cr:29

    singer = lead_singer_for("Doors", lead_singers)
    ^~~~~~
&lt;/pre&gt;


&lt;p&gt;And reading down you can see where the &lt;code&gt;Nil&lt;/code&gt; type was actually introduced:&lt;/p&gt;

&lt;pre class="console"&gt;
  /Users/pat/bllvm/crystal/src/enumerable.cr:228

      def find(if_none = nil)
&lt;/pre&gt;


&lt;p&gt;As you can see, the &lt;code&gt;Nil&lt;/code&gt; type is a default value passed to the &lt;code&gt;Enumerable#find&lt;/code&gt;
method, which I call in &lt;code&gt;lead_singer_for&lt;/code&gt;. Crystal’s standard library is
entirely implemented using Crystal. This means if I’m curious (and I am) I can
read how Crystal implements all of the &lt;code&gt;Enumerable&lt;/code&gt; methods. I could even go
and experiment with the language by modifying them.&lt;/p&gt;

&lt;p&gt;In fact, the Crystal compiler itself is implemented with Crystal! Interested in
learning about how a real world compiler works but don’t have time to learn C
or C++? Read the Crystal source code.&lt;/p&gt;

&lt;h2&gt;Think Twice About Which Types to Use&lt;/h2&gt;

&lt;p&gt;Now back to my example. I’m done, right? Recall in my Ruby code I added a check
for the return value of &lt;code&gt;lead_singer_for&lt;/code&gt;:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
singer = lead_singer_for(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Doors&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, lead_singers)
&lt;span class="keyword"&gt;if&lt;/span&gt; singer
  puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;singer.first_name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;singer.last_name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;else&lt;/span&gt;
  puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Not found&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The same fix will work for Crystal. The Crystal compiler is clever enough to
know that inside the first branch of the if-statement the type of &lt;code&gt;singer&lt;/code&gt; is
&lt;code&gt;Singer&lt;/code&gt; and not &lt;code&gt;Nil&lt;/code&gt;. And in the second, else branch it is &lt;code&gt;Nil&lt;/code&gt; and not &lt;code&gt;Singer&lt;/code&gt;. It
splits up the union type again depending on the syntax of my program. Amazing.&lt;/p&gt;

&lt;p&gt;But before I declare victory, this business about the &lt;code&gt;(Singer | Nil)&lt;/code&gt; union type
has got me thinking… Crystal decided that a &lt;code&gt;nil&lt;/code&gt; value can be introduced by my
code in a certain scenario. But maybe &lt;code&gt;nil&lt;/code&gt; should be a valid value for one of my
variables? After all, I’m dealing with rock stars. Sometimes rock stars become
so famous they decide they don’t need a last name any more. What about lead
singers like Sting, Bono or Prince? How would I represent them in my test data
set?&lt;/p&gt;

&lt;p&gt;The answer is obvious: their singer objects would have a &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;last_name&lt;/code&gt; value. I
would create them like this:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="constant"&gt;Singer&lt;/span&gt;.new(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;The Police&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Sting&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In Ruby, this would have worked just fine. But Crystal objects:&lt;/p&gt;

&lt;pre class="console"&gt;
$ crystal lead_singers.cr      
Error in ./lead_singers.cr:26: instantiating 'Singer:Class#new(String, String, Nil)'

  Singer.new("The Police", "Sting", nil),
         ^~~

instantiating 'Singer#initialize(String, String, Nil)'

in ./lead_singers.cr:10: instance variable '@last_name' of Singer must be String, not Nil

    @last_name = last_name
    ^~~~~~~~~~
&lt;/pre&gt;


&lt;p&gt;What do I do now? How can I save a &lt;code&gt;nil&lt;/code&gt; last name in my &lt;code&gt;Singer&lt;/code&gt; class? The
instance variables are strings and cannot hold &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The answer is I picked the wrong type for &lt;code&gt;last_name&lt;/code&gt;. To accommodate
super-famous singers, I need to use the same union type we saw earlier:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Singer&lt;/span&gt;

  property band : &lt;span class="constant"&gt;String&lt;/span&gt;
  property first_name : &lt;span class="constant"&gt;String&lt;/span&gt;
  property last_name : (&lt;span class="constant"&gt;String&lt;/span&gt; | &lt;span class="constant"&gt;Nil&lt;/span&gt;)

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(band, first_name, last_name)
    &lt;span class="instance-variable"&gt;@band&lt;/span&gt; = band
    &lt;span class="instance-variable"&gt;@first_name&lt;/span&gt; = first_name
    &lt;span class="instance-variable"&gt;@last_name&lt;/span&gt; = last_name
  &lt;span class="keyword"&gt;end&lt;/span&gt; 

&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now I can create the Sting object no problem:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="constant"&gt;Singer&lt;/span&gt;.new(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;The Police&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Sting&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we’re ready to compile my Ruby and move on!&lt;/p&gt;

&lt;pre class="console"&gt;
$ crystal lead_singers.cr
Error in ./lead_singers.cr:37: instantiating 'longest_last_name(Array(Singer))'

puts longest_last_name(lead_singers)
     ^~~~~~~~~~~~~~~~~

in ./lead_singers.cr:20: undefined method 'size' for Nil (compile-time type is (String | Nil))

  singers.map{|s| s.last_name}.max_by{|name| name.size }
                                                  ^~~~

================================================================================

Nil trace:

  ./lead_singers.cr:20

      singers.map{|s| s.last_name}.max_by{|name| name.size }
                                           ^~~~
&lt;/pre&gt;


&lt;p&gt;Once again the Crystal compiler has stopped me in my tracks. When will I ever
get this right? Is this another Ruby vs. Crystal difference? Another subtlety
of the Crystal type system I need to learn about?&lt;/p&gt;

&lt;h2&gt;Static Types Reveal a Hidden Problem&lt;/h2&gt;

&lt;p&gt;No. Crystal has found a real problem with my Ruby code, a problem I never
noticed. Because Sting doesn’t have a last name, the &lt;code&gt;longest_last_name&lt;/code&gt; method
runs into a problem:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;longest_last_name&lt;/span&gt;(singers)
  singers.map{|s| s.last_name}.max_by{|name| name.size }
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first call to &lt;code&gt;map&lt;/code&gt; returns an array of last names, which now will contain
&lt;code&gt;nil&lt;/code&gt;. Then I pass that array into &lt;code&gt;max_by&lt;/code&gt; which converts the names into
corresponding name lengths, and then returns the longest name.&lt;/p&gt;

&lt;p&gt;Now that I know where to look, it’s easy to see the problem: &lt;code&gt;max_by&lt;/code&gt; will pass
&lt;code&gt;nil&lt;/code&gt; to the second block for Sting’s missing last name, and the block will then
try to call the &lt;code&gt;size&lt;/code&gt; method on &lt;code&gt;nil&lt;/code&gt;. Easy enough to fix:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;longest_last_name&lt;/span&gt;(singers)
  singers.map{|s| s.last_name}.compact.max_by{|name| name.size }
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;compact&lt;/code&gt;, I remove the &lt;code&gt;nil&lt;/code&gt; element from the array of names, meaning the
&lt;code&gt;size&lt;/code&gt; method will never be called on &lt;code&gt;nil&lt;/code&gt;. Of course, now that I’m thinking about
&lt;code&gt;nil&lt;/code&gt; values and the &lt;code&gt;longest_last_name&lt;/code&gt; method, I realize that maybe all the
singers are super-famous and have no last names, or possibly there were no
singers to begin with. I tighten up my code even more:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;longest_last_name&lt;/span&gt;(singers)
  singers_with_last_names = singers.map{|s| s.last_name}.compact
  &lt;span class="keyword"&gt;unless&lt;/span&gt; singers_with_last_names.empty?
    singers_with_last_names.max_by{|name| name.size }
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

last_name = longest_last_name(lead_singers)
&lt;span class="keyword"&gt;if&lt;/span&gt; last_name
  puts last_name
&lt;span class="keyword"&gt;else&lt;/span&gt;
  puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Not found&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now everything works!&lt;/p&gt;

&lt;p&gt;One interesting footnote here: Ruby allows me to get away without checking for
an empty array using &lt;code&gt;unless&lt;/code&gt;. In Ruby if I call &lt;code&gt;max_by&lt;/code&gt; on an empty array it
simply returns &lt;code&gt;nil&lt;/code&gt;, meaning there is no maximum value at all. But Crystal is
even more strict: It raises an runtime exception &amp;ldquo;Empty enumerable
(Enumerable::EmptyError)&amp;rdquo;. In a sense this is going a bit overboard, because &lt;code&gt;nil&lt;/code&gt;
seems to me a valid result in this case. But on the other hand, calling &lt;code&gt;max_by&lt;/code&gt;
on an empty array might be an indication of other problems in my code. Crystal
brings that to my attention, but with a runtime exception not a compile error.
Crystal reports runtime errors for other cases as well, for example looking for
a value in a hash when the key doesn’t exist:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
hash = { &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;a&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span class="integer"&gt;123&lt;/span&gt; } 
puts hash[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;b&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
&lt;span class="comment"&gt;# =&amp;gt; Missing hash key: :b (KeyError)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The Crystal compiler expects a higher level of quality and thoroughness in my
code than Ruby does, it seems to me.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are two important concepts I took away from this exercise. First, using
Ruby we depend on the completeness of our test suite in order to find and avoid
mistakes. Precisely which values you choose for your test data set is very
important. If I had thought of using Sting when I originally wrote my tests, I
would have found the missing last name problem right away.  But I didn’t.&lt;/p&gt;

&lt;p&gt;Second, the most tedious and time consuming part of converting from Ruby to
Crystal, choosing a type for each value in my code, is of course the most
valuable step in the process. It wasn’t until I tried using &lt;code&gt;(String | Nil)&lt;/code&gt; for
the &lt;code&gt;@last_name&lt;/code&gt; variable that the Crystal compiler found the missing last name
problem for me.&lt;/p&gt;

&lt;p&gt;You still may not be convinced. This was obviously a very contrived example and
using the Crystal compiler on real world Ruby code won’t be easy. I agree. It
would be pointless to try to compile a large Rails application using Crystal.&lt;/p&gt;

&lt;p&gt;But look over your code. I would guess there are a few important methods or
classes which are central to your application’s behavior and logic. Take an
hour or two and copy and paste those important lines of code into a separate
file, stub out any dependencies, and run it through the Crystal compiler. Take
the time to convert your code to use static types. Take the time to think
carefully about which types of values your code should be able to handle.&lt;/p&gt;

&lt;p&gt;Bring your important Ruby code to the Crystal compiler for a second opinion.
You might be surprised by what Crystal finds.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Two Dumb Ruby Mistakes</title>
    <link href="http://patshaughnessy.net/2016/4/2/two-dumb-ruby-mistakes" rel="alternate"/>
    <id>http://patshaughnessy.net/2016/4/2/two-dumb-ruby-mistakes</id>
    <published>2016-04-02T03:00:00Z</published>
    <updated>2016-04-02T03:00:00Z</updated>
    <category>ruby</category>
    <author>
      <name></name>
    </author>
    <summary type="html">&lt;div style="float: right; padding: 0px 0px 20px 30px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/4/2/rope-climber.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;Coding is like climbing: You need equipment&lt;br/&gt; that will catch you when you make a mistake.&lt;br/&gt;
    &lt;small&gt;(source: &lt;a href="https://commons.wikimedia.org/wiki/File:Free_climbing_20060701.jpg"&gt;Elke Wetzig via Wikimedia Commons&lt;/a&gt;)&lt;/small&gt;</summary>
    <content type="html">&lt;div style="float: right; padding: 0px 0px 20px 30px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/4/2/rope-climber.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;Coding is like climbing: You need equipment&lt;br/&gt; that will catch you when you make a mistake.&lt;br/&gt;
    &lt;small&gt;(source: &lt;a href="https://commons.wikimedia.org/wiki/File:Free_climbing_20060701.jpg"&gt;Elke Wetzig via Wikimedia Commons&lt;/a&gt;)&lt;/small&gt;&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;Most Ruby blog posts show you examples of code you should write: how to solve a
certain problem, how to use some library or gem, how Ruby itself works. But
today I decided to write about a few dumb mistakes I’ve made using Ruby
recently. Read on to see two things you &lt;em&gt;should not do&lt;/em&gt; with the Ruby language,
for a change.&lt;/p&gt;

&lt;p&gt;The depressing thing about this is that I made these dumb mistakes just in the
past few weeks! I’ve been using Ruby professionally every day for eight years,
I’ve researched and written about Ruby in my spare time as a hobby, and &lt;em&gt;I still
make dumb mistakes with the language all the time!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Coding is like climbing: Sooner or later we all make mistakes and fall. What
you need to do is plan on this happening and use the appropriate equipment to
avoid disaster. Climbers use carabiners, ropes and harnesses to catch them when
they fall. Developers should use a language that will catch them when they make
dumb mistakes.&lt;/p&gt;

&lt;h2&gt;Searching For An Array Element&lt;/h2&gt;

&lt;p&gt;Let’s start with some test data. Here’s an array of &lt;span
class="code"&gt;Person&lt;/span&gt; objects, each with a first name, last name and an
insult count:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
    &lt;span class="constant"&gt;Person&lt;/span&gt; = &lt;span class="constant"&gt;Struct&lt;/span&gt;.new(&lt;span class="symbol"&gt;:first_name&lt;/span&gt;, &lt;span class="symbol"&gt;:last_name&lt;/span&gt;, &lt;span class="symbol"&gt;:insults&lt;/span&gt;)
    candidates = [ 
        &lt;span class="constant"&gt;Person&lt;/span&gt;.new(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Ted&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Cruz&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;432&lt;/span&gt;),
        &lt;span class="constant"&gt;Person&lt;/span&gt;.new(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Donald&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Trump&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;892&lt;/span&gt;),
        &lt;span class="constant"&gt;Person&lt;/span&gt;.new(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Marco&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Rubio&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;321&lt;/span&gt;)
    ]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A couple of weeks ago (using different data of course) I wrote this line of
code to search for a specific element in the array:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/4/2/mistake1.png"/&gt;&lt;/p&gt;

&lt;div style="clear: both"&gt;&lt;/div&gt;


&lt;p&gt;What I wanted was the first person in the array named “Marco.” Instead when I
ran the code what I got was the first element of the array, but with the first
name set to “Marco:”&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
p marco
=&amp;gt; &lt;span class="comment"&gt;#&amp;lt;struct Person first_name=&amp;quot;Marco&amp;quot;, last_name=&amp;quot;Cruz&amp;quot;, insults=432&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Of course, I should have known better. The proper line of code is:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/4/2/correct1.png"/&gt;&lt;/p&gt;

&lt;p&gt;I should have used &lt;span class="code"&gt;==&lt;/span&gt; instead of &lt;span
class="code"&gt;=&lt;/span&gt;. What a dumb mistake. I can’t believe I wrote this code;
how embarrassing! I’m sure you all saw the problem right away, and maybe a few
of you have made the same mistake before. But let’s walk through what happened
when I ran the incorrect code, just to be sure we thoroughly understand the
problem.&lt;/p&gt;

&lt;p&gt;Ruby started with the &lt;span class="code"&gt;candidates&lt;/span&gt; array, and called
the &lt;span class="code"&gt;find&lt;/span&gt; method on it:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/4/2/array1.svg"/&gt;&lt;/p&gt;

&lt;p&gt;The &lt;span class="code"&gt;find&lt;/span&gt; method is actually a member of the &lt;span
class="code"&gt;Enumerable&lt;/span&gt; module, which Ruby includes automatically into
the &lt;span class="code"&gt;Array&lt;/span&gt; class. When &lt;span class="code"&gt;find&lt;/span&gt;
ran, it iterated over the elements of the array and called the block I
provided, passing in each element. The first element was the “Ted Cruz” person
object:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/4/2/call-block1.svg"/&gt;&lt;/p&gt;

&lt;p&gt;Now the block executed. And my dumb mistake came into play. What I intended was
for the block to return whether or not the first name of the given person was
equal to “Marco.” If the first name was “Marco” then &lt;span
class="code"&gt;Person#first_name == &amp;quot;Marco&amp;quot;&lt;/span&gt; would return &lt;span
class="code"&gt;true&lt;/span&gt;, the block would return &lt;span class="code"&gt;true&lt;/span&gt;
and &lt;span class="code"&gt;Enumerable#find&lt;/span&gt; would return the target person.
In this case, &amp;ldquo;Ted&amp;rdquo; is not &amp;ldquo;Marco&amp;rdquo; so the block would return &lt;span
class="code"&gt;false&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;But my block didn’t check whether the person is named “Marco;” instead, it
called the &lt;span class="code"&gt;Person#first_name=&lt;/span&gt; method, setting the
person’s name to “Marco!”&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/4/2/set-first-name.svg"/&gt;&lt;/p&gt;

&lt;p&gt;And now, to make matters worse, the block returned the value returned by
&lt;span class="code"&gt;Person#first_name=&lt;/span&gt;, which was the string “Marco,” the new value of the first
name attribute. Because Ruby considered “Marco” to be &lt;em&gt;truthy&lt;/em&gt;, &lt;span class="code"&gt;Enumerable#find&lt;/span&gt;
returned the first person, even though that person was originally named Ted
Cruz. My surrounding code now thinks it found Marco Rubio, but instead has Ted
Cruz, renamed to Marco Cruz. What a mess.&lt;/p&gt;

&lt;h2&gt;Why Didn’t Ruby Tell Me Something Was Wrong?&lt;/h2&gt;

&lt;div style="float: right; padding: 0px 0px 20px 30px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/4/2/bouldering.jpg"&gt;&lt;br/&gt;
  &lt;i&gt; As a developer, you’re always just one&lt;br/&gt; keystroke away from falling off a cliff.  &lt;br/&gt;
    &lt;small&gt;(source: &lt;a href="https://commons.wikimedia.org/wiki/File:Bouldering.jpg"&gt;DecafGrub47393 via Wikimedia Commons&lt;/a&gt;)&lt;/small&gt;&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;Think about this for a moment: I used the &lt;span class="code"&gt;find&lt;/span&gt;
method, which called a block and expected that block to return &lt;span
class="code"&gt;true&lt;/span&gt; or &lt;span class="code"&gt;false&lt;/span&gt;.  But my block
returned neither &lt;span class="code"&gt;true&lt;/span&gt; nor &lt;span
class="code"&gt;false&lt;/span&gt;. It returned “Marco.”&lt;/p&gt;

&lt;p&gt;Why didn’t Ruby issue some sort of error or warning in this case? Yes, I
understand that Ruby considers all values, except for &lt;span
class="code"&gt;false&lt;/span&gt; and &lt;span class="code"&gt;nil&lt;/span&gt;, to be equivalent
to &lt;span class="code"&gt;true&lt;/span&gt;. In fact, Ruby developers quite often take
advantage of this fact to write more concise readable code: We can write &lt;span
class="code"&gt;if value&lt;/span&gt; instead of &lt;span class="code"&gt;if value !=
false&lt;/span&gt; or &lt;span class="code"&gt;if value != nil&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;But in this case, Ruby’s silence allowed my simple coding mistake to become a
serious problem. If Ruby had given me some sort of warning or error the first
time I ran this code, I would have found the problem and fixed it in 5 seconds.
Instead, this code ran for weeks and failed every single time, and I had no
idea.&lt;/p&gt;

&lt;p&gt;When I fell, Ruby didn’t catch me, it allowed me to fall off the cliff!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Erik Michaels-Ober &lt;a href="https://twitter.com/sferik/status/716289922005475328"&gt;pointed out today on
Twitter&lt;/a&gt; that if you
always put the variable on the right and the constant on the left, for example
like this:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
marco = candidates.find { |person| &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Marco&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; = person.first_name }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;…then Ruby will immediately report a syntax error and tell you where the
problem was if you ever confuse &lt;span class="code"&gt;=&lt;/span&gt; with &lt;span
class="code"&gt;==&lt;/span&gt;. Joshua Ballanco told us that this style of putting the
constant before the variable is known as a &lt;a href="https://en.wikipedia.org/wiki/Yoda_conditions"&gt;Yoda
condition&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Finding The Maximum Value in an Array&lt;/h2&gt;

&lt;p&gt;We all have a bad day from time to time. After making that mistake I just
continued to work on my project, trying harder not to make any more dumb
mistakes. It was my fault, I thought. I just needed to be a better programmer.&lt;/p&gt;

&lt;p&gt;But of course, it happened again! I made another dumb Ruby mistake just a few
days later. This time I wanted to sort the same array. Specifically, I wanted
to find the array element with the maximum value for some attribute. I was
using different data, of course, but we can translate the problem to our
candidate data set easily.&lt;/p&gt;

&lt;p&gt;Suppose I wanted to find the candidate with the maximum number of insults.
Easy, right? Here’s the line of code I wrote:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/4/2/mistake2.png"/&gt;&lt;/p&gt;

&lt;p&gt;Can you spot the problem here? When I run that code I don’t get Donald Trump, who has the most insults. Instead, I get:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
p most_insulting
=&amp;gt; &lt;span class="comment"&gt;#&amp;lt;struct Person first_name=&amp;quot;Marco&amp;quot;, last_name=&amp;quot;Rubio&amp;quot;, insults=321&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again a simple, dumb mistake. I should have called &lt;span
class="code"&gt;max_by&lt;/span&gt;, instead of &lt;span class="code"&gt;max&lt;/span&gt;. Here’s
the correct code:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/4/2/correct2.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class="code"&gt;Enumerable#max_by&lt;/span&gt; does what I thought &lt;span
class="code"&gt;Enumerable#max&lt;/span&gt; would do: It sorts the values returned by
the block, and then returns the object corresponding to the maximum value.
This is only slightly less embarrassing than my first dumb mistake. Almost all
modern programming languages use &lt;span class="code"&gt;==&lt;/span&gt; and &lt;span
class="code"&gt;=&lt;/span&gt; for equality vs. assignment. There’s no excuse for making
that mistake: It was just dumb.&lt;/p&gt;

&lt;p&gt;The difference between &lt;span class="code"&gt;max&lt;/span&gt; and &lt;span
class="code"&gt;max_by&lt;/span&gt; is not quite as obvious. But again, I’ve been using
Ruby for 8 years now. I should know better! I’m just a bad Ruby developer. But
before we blame this mistake entirely on me, let’s take a closer look at what
actually happened when I ran my bad code. Let’s step through what &lt;span
class="code"&gt;Enumerable#max&lt;/span&gt; did, just as we did before with &lt;span
class="code"&gt;Enumerable#find&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Again Ruby started by calling &lt;span class="code"&gt;Enumerable#max&lt;/span&gt; on the
candidates array:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/4/2/array2.svg"/&gt;&lt;/p&gt;

&lt;p&gt;And again, just like &lt;/span&gt;find&lt;/span&gt;, &lt;span class="code"&gt;max&lt;/span&gt; iterates
over the array elements. However, instead of passing each person to the block
one at a time, it actually passes the array elements in pairs:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/4/2/call-block2.svg"/&gt;&lt;/p&gt;

&lt;p&gt;Why did Ruby pass two &lt;span class="code"&gt;Person&lt;/span&gt; objects to my block?
&lt;span class="code"&gt;Enumerable#max&lt;/span&gt; searches for the array element &amp;ndash; not
the return value of a block &amp;ndash; which has the maximum value. It assumes that the
values in the array can be compared, that they have a natural sort order.
&lt;span class="code"&gt;Enumerable#max&lt;/span&gt; is perfect for an array of integers or
an array of strings. Ruby can sort them automatically and find the maximum
value by returning the last element.&lt;/p&gt;

&lt;p&gt;Additionally, Ruby allows you to use &lt;span class="code"&gt;max&lt;/span&gt; when the
array elements can’t be sorted automatically, when you have an array of
objects, like my &lt;span class="code"&gt;Person&lt;/span&gt; structures. Because Ruby
doesn’t know whether one person is greater or less than another, it allows you
to pass a block to &lt;span class="code"&gt;max&lt;/span&gt; that answers that question.
The block should accept two arguments return one of three numeric values: -1, 0
or 1:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-1 if the first value is less than the second (they are in ascending order)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;0 indicates they are the same, at least in terms of their sort order, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1 if the first value is greater than the second (they are in descending order)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So what happened here was that by using &lt;span
class="code"&gt;Enumerable#max&lt;/span&gt; and providing a block, Ruby assumed my block
was there to determine the sort order of the Person objects, not to return an
attribute for each one.&lt;/p&gt;

&lt;p&gt;As you probably know, Ruby makes our lives easier by providing the “space ship”
operator, &lt;span class="code"&gt;&amp;lt;=&gt;&lt;/span&gt;, that compares two values and returns
this sort order number: -1, 0 or 1. The correct way to find the most insulting
candidate using &lt;span class="code"&gt;max&lt;/span&gt; would be to compare the two
values of &lt;span class="code"&gt;Person#insults&lt;/span&gt; using &lt;span
class="code"&gt;&amp;lt;=&gt;:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
most_insulting = candidates.max{|person1, person2| person1.insults &amp;lt;=&amp;gt; person2.insults}
p most_insulting
=&amp;gt; &lt;span class="comment"&gt;#&amp;lt;struct Person first_name=&amp;quot;Donald&amp;quot;, last_name=&amp;quot;Trump&amp;quot;, insults=892&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;Why Didn’t Ruby Tell Me Something Was Wrong?&lt;/h2&gt;

&lt;p&gt;I knew all about the space ship operator and sort order blocks, but for
whatever reason in the moment I typed in my bad code I just forgot. Maybe I was
in a rush, maybe I was just tired. Maybe I really thought I typed &lt;span
class="code"&gt;max_by&lt;/span&gt; but somehow the “_by” part just didn’t leave my
brain and make it to the keyboard.&lt;/p&gt;

&lt;p&gt;But Ruby knew I should have used &lt;span class="code"&gt;max_by&lt;/span&gt;, or least
that I should have accepted two parameters in my block. Why didn’t it tell me?&lt;/p&gt;

&lt;p&gt;That is, my block expected only one argument, not two. I wrote:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
{|person| etc…}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and not:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
{|person1, person2| etc… }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Why didn’t Ruby complain when it tried to pass two objects, but my block
only accepted one? It turns out when you pass extra arguments to a block Ruby
silently ignores them. Note: Ruby does check the number of arguments when you
explicitly use &lt;span class="code"&gt;lambda{}&lt;/span&gt; or &lt;span
class="code"&gt;&amp;ndash;&gt;()&lt;/span&gt; and then call it using the &lt;span
class="code"&gt;Proc.call&lt;/span&gt; method.  But 99% of the time Ruby developers use
blocks in the standard, default manner and don’t create &lt;span
class="code"&gt;Proc&lt;/span&gt; objects explicitly.&lt;/p&gt;

&lt;p&gt;Ruby could have told me something was wrong by displaying a warning or an error
message, maybe: “wrong number of arguments (2 for 1) (ArgumentError).” But
instead, it remained silent. It assumed that I just didn’t need that second
block argument, that I wanted to keep my code simpler and easier to read, and
conveniently allowed me to leave it out of the block’s argument list. Ruby
assumed I was a smart, experienced developer who doesn’t make dumb mistakes
like this. Ruby was so wrong!&lt;/p&gt;

&lt;p&gt;What happened next? Ruby continued to run my block, and things got really ugly.
Take another look at the block’s code:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
{|person| person.insults}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It returns the insult count for the given person &amp;ndash; a number! Next Ruby
interpreted the numerical value my block returned, 432, 892 or 321, as the sort
order indicator. That’s right: Ruby will accept any positive value from the
sort order block, not just 1, and consider that to mean the two objects are in
descending order. Similarly, it will take any negative value to mean the values
are in ascending order.&lt;/p&gt;

&lt;p&gt;Again, Ruby could have told me: “wrong type for block return value (Integer for
SortOrder) (TypeError).” But, of course, Ruby isn’t a statically typed
language. It doesn&amp;rsquo;t check the types of method and block arguments, or their
return values.&lt;/p&gt;

&lt;div style="float: right; padding: 70px 0px 30px 30px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/4/2/carabiner.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;Your coding equipment should catch you&lt;br/&gt;when you make a mistake and fall.&lt;/i&gt;&lt;br/&gt;
    &lt;small&gt;(source: &lt;a
href="https://commons.wikimedia.org/wiki/File:Carabiner.jpg"&gt;Marcin Jahr via
Wikimedia Commons&lt;/a&gt;)&lt;/small&gt;&lt;/i&gt; &lt;/div&gt;


&lt;p&gt;Once again, Ruby erred on the side of convenience, and assumed I knew what I
was doing. It conveniently allowed me to return 321 instead of 1, just in case
I really wanted to return 321 without having to convert it to 1.&lt;/p&gt;

&lt;h2&gt;Our Programming Language Should Catch Our Dumb Mistakes&lt;/h2&gt;

&lt;p&gt;We actually make dumb mistakes all the time, not just once or twice a week, but
probably hundreds of times every day. Every time we misspell a keyword, forget
a method argument, or use an API the wrong way we have made a mistake. But we
don’t think of these mistakes as mistakes &amp;ndash; they are just how we work as
humans. When we type, we usually press the backspace key quite often. When we
use an API or run shell commands we have to check the documentation or
StackOverflow to remind ourselves what arguments or options to use.&lt;/p&gt;

&lt;p&gt;And usually our programming language, whether it’s Ruby or something else,
finds our mistakes immediately and tells us about them with a syntax error
message. We correct the mistake within seconds and continue coding, climbing
higher and higher up the cliff. But in my two examples the mistakes,
unfortunately, weren’t apparent immediately.  This incorrect code ran for weeks
before I discovered the problem. You always want to fail fast: The worst
mistakes are the ones you never notice until it’s too late.&lt;/p&gt;

&lt;p&gt;But why didn’t I discover these mistakes sooner by running tests? Don’t I use
TDD? Don’t I at least write tests to check my code after I’ve written it? Yes.
But in my actual project, these mistakes were part of my test code. They
allowed my tests to pass, but caused them to return a false positive result. My
tests were green, but actually weren’t functioning at all. Tests aren&amp;rsquo;t
perfect. They are only as good as the code you write to implement them.&lt;/p&gt;

&lt;p&gt;Maybe these two dumb Ruby mistakes were exactly that: mistakes Ruby made and
not me. I’m only human; it’s normal for me to type in nonsense and garbage all
day long into the computer. But Ruby is a programming language. It’s job &amp;ndash; it’s
most important job &amp;ndash; is to tell me when my code is incorrect as soon as
possible. In these two examples, it was the Ruby language itself that made the
dumb mistake. The bugs weren’t in my code, they were in the language itself.&lt;/p&gt;

&lt;p&gt;Of course, I could just switch to a statically typed language, like Java or Go.
These languages automatically check the types of arguments and return values
for me. If I used Swift I could take advantage of static types and use
blocks/closures. I could even use a language like Haskell where the type system
is so powerful that merely by allowing my code to run with no errors, the
compiler has mathematically proven my code is correct. (If this could only be
true!)&lt;/p&gt;

&lt;p&gt;But I love Ruby. It’s a joy to use. Ruby code has a very human elegance to it
that I haven’t seen in other programming languages. I just wish Ruby would
catch me every time I fall.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Is Your Postgres Query Starved for Memory?</title>
    <link href="http://patshaughnessy.net/2016/1/22/is-your-postgres-query-starved-for-memory" rel="alternate"/>
    <id>http://patshaughnessy.net/2016/1/22/is-your-postgres-query-starved-for-memory</id>
    <published>2016-01-22T04:00:00Z</published>
    <updated>2016-01-22T04:00:00Z</updated>
    <category>ruby</category>
    <author>
      <name></name>
    </author>
    <summary type="html">&lt;div style="float: left; padding: 7px 30px 20px 0px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/1/22/sphygmomanometer.png"&gt;&lt;br/&gt;
  &lt;i&gt;
Like a patient with low blood pressure, a slow SQL&lt;br/&gt;
query might not be getting the memory it needs.
  &lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;For years or even decades, I’ve heard about how important it is to optimize my
SQL statements and database schema.</summary>
    <content type="html">&lt;div style="float: left; padding: 7px 30px 20px 0px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/1/22/sphygmomanometer.png"&gt;&lt;br/&gt;
  &lt;i&gt;
Like a patient with low blood pressure, a slow SQL&lt;br/&gt;
query might not be getting the memory it needs.
  &lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;For years or even decades, I’ve heard about how important it is to optimize my
SQL statements and database schema. When my application starts to
slow down, I look for missing indexes; I look for unnecessary joins; I think
about caching results with a materialized view.&lt;/p&gt;

&lt;p&gt;But instead, the problem might be my Postgres server was not installed and
tuned properly. Buried inside the &lt;span class="code"&gt;postgresql.conf&lt;/span&gt;
file is an obscure, technical setting called &lt;span
class="code"&gt;work_mem&lt;/span&gt;. This controls how much “working memory” your
Postgres server allocates for each sort or join operation. The default value
for this is only 4MB:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/1/22/work_mem.png"/&gt;&lt;/p&gt;

&lt;div style="clear: left"&gt;&lt;/div&gt;


&lt;p&gt;If your application ever tries to sort or join more than four megabytes worth
of data, this working memory buffer will fill up. Instead of just returning the
dataset you want, Postgres will waste time streaming excess data out to disk &amp;ndash;
only to read it back again later as the hash join or sort algorithm proceeds.&lt;/p&gt;

&lt;p&gt;Today I’ll start with a look at how Postgres scales up the hash join algorithm
for larger and larger data sets. Then I’ll measure how much slower a hash join
query is when the hash table doesn’t fit into the working memory buffer. You’ll
learn how to use the EXPLAIN ANALYZE command to find out if your slow query is
starved for memory.&lt;/p&gt;

&lt;h2&gt;Hash Tables Inside of Postgres&lt;/h2&gt;

&lt;p&gt;In my last article, I described &lt;a href="http://patshaughnessy.net/2015/11/24/a-look-at-how-postgres-executes-a-tiny-join"&gt;how Postgres implements the hash join
algorithm&lt;/a&gt;.
I showed how Postgres scans over all the records in one of the tables from the
join and saves them in a hash table.&lt;/p&gt;

&lt;p&gt;Here’s what a hash table might look like conceptually:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/1/22/table1.svg"/&gt;&lt;/p&gt;

&lt;p&gt;On the left is an array of pointers called &lt;em&gt;buckets&lt;/em&gt;. Each of these pointers is
the head of a linked list, which I show on the right using blue rectangles. The
rectangles represent values from one of the tables in the join. Postgres groups
the values into lists based on their hash values. By organizing the values from one
table like this, Postgres can later scan over a second table and repeatedly
search the hash table to perform the join efficiently. This algorithm is known
as a &lt;em&gt;hash join&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Postgres’s hash join code gracefully scales up to process larger and larger
data sets by increasing the number of buckets. If the target table had more
records, Postgres would use 2048 buckets instead of 1024:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/1/22/table2.svg"/&gt;&lt;/p&gt;

&lt;p&gt;Before starting to execute the hash join algorithm, Postgres estimates how many
records it will need to add to the hash table, using the query plan. Then
Postgres chooses a bucket count large enough to fit all of the records.&lt;/p&gt;

&lt;p&gt;Postgres’s bucket count formula keeps the average linked list length less than
10 (the constant &lt;span class="code"&gt;NTUP_PER_BUCKET&lt;/span&gt; in the Postgres
source code), to avoid iterating over long lists. It also sets the bucket count
to a power of two, which allows Postgres to use C bitmask operations to assign
buckets to hash values. The least significant bits of the hash value for each
record becomes the bucket number.&lt;/p&gt;

&lt;p&gt;If you’re curious, Postgres implements the bucket count formula in a C function
called &lt;span class="code"&gt;ExecChooseHashTableSize&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;div class="sign"&gt;
  &lt;div class="sign-icon"&gt;&lt;/div&gt;
  &lt;div class="function-info"&gt;
    &lt;div class="function-name"&gt;ExecChooseHashTableSize&lt;/div&gt;
    &lt;div class="function-link"&gt;&lt;a href="http://doxygen.postgresql.org/nodeHash_8c.html#a5b805ac64e22306b7307b4a07ae2b34e"&gt;view on postgresql.org&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="function-code"&gt;
    &lt;img src="http://patshaughnessy.net/assets/2016/1/22/ExecChooseHashTableSize.png"/&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;


&lt;h2&gt;How Large Can a Postgres Hash Table Grow?&lt;/h2&gt;

&lt;p&gt;If the table from your join query was even larger, then Postgres would use 4096
buckets instead of 2048:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/1/22/table3.svg"/&gt;&lt;/p&gt;

&lt;p&gt;In theory, this doubling of the bucket count could continue forever: 8192
buckets, 16384 buckets, etc. With 10 records per linked list, this would
accommodate 81,920 values, 163,840 values, etc.&lt;/p&gt;

&lt;p&gt;In practice, as the total size of the data set being saved into the hash table
continues to increase Postgres will eventually run out of memory. But that
doesn’t seem to be an immediate problem, does it? Modern server hardware
contains tens or even hundreds of GBs &amp;ndash; that is plenty of room to hold an
extremely large hash table.&lt;/p&gt;

&lt;p&gt;But in fact, Postgres limits the size of each hash table to only 4MB!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/1/22/table4.svg"/&gt;&lt;/p&gt;

&lt;p&gt;The rectangle I drew around the hash table above is the working memory buffer
assigned to that table. Regardless of how much memory my server hardware
actually has, Postgres won’t allow the hash table to consume more than 4MB.
This value is the &lt;span class="code"&gt;work_mem&lt;/span&gt; setting found in the
&lt;span class="code"&gt;postgresql.conf&lt;/span&gt; file.&lt;/p&gt;

&lt;p&gt;At the same time Postgres calculates the number of buckets, it also calculates
the total amount of memory it expects the hash table to consume. If this amount
exceeds 4MB, Postgres divides the hash operation up into a series of &lt;em&gt;batches&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/1/22/batches.svg"/&gt;&lt;/p&gt;

&lt;p&gt;In this example, Postgres calculated that it would need up to 8MB to hold the
hash table. A larger join query might have many more batches, each holding 4MB
of data. Like the bucket count, Postgres sets the batch count to a power of two
also.  The first batch, shown on the left, contains the actual hash table in
memory.  The second batch, shown on the right, contains the records that won’t
fit into the 4MB hash table in the first batch.  Postgres assigns a batch
number to each record, along with the bucket number.  Then it saves the records
from the first batch into the hash table, and streams the remaining data out to
disk. Each batch gets its own temporary file.&lt;/p&gt;

&lt;p&gt;Using an algorithm known as the &lt;a href="https://en.wikipedia.org/wiki/Hash_join#Hybrid_hash_join"&gt;Hybrid hash
join&lt;/a&gt;, Postgres first
searches the hash table already in memory. Then it streams all of the data back
from disk for the next batch, builds another hash table and searches it,
repeating this process for each batch.&lt;/p&gt;

&lt;br/&gt;




&lt;blockquote&gt;
Note: Postgres actually holds a second hash table in memory, called the skew
table. For simplicity I’m not showing this in the diagram. This special hash
table is an optimization to handle hash values that occur frequently in the
data. Postgres saves the skew table inside the same 4MB working memory buffer,
so the primary hash table actually has a bit less than 4MB available to it.
&lt;/blockquote&gt;


&lt;h2&gt;Measuring Your SQL Statement’s Blood Pressure&lt;/h2&gt;

&lt;p&gt;If one of the SQL queries in your application is running slowly, use the
&lt;span class="code"&gt;EXPLAIN ANALYZE&lt;/span&gt; to find out what’s going on:&lt;/p&gt;

&lt;pre style="font-size: 10px"&gt;
&gt; explain analyze select title, company from publications, authors where author = name;

                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=2579.00..53605.00 rows=50000 width=72) (actual time=66.820..959.794 rows=21 loops=1)
   Hash Cond: ((authors.name)::text = (publications.author)::text)
   -&gt;  Seq Scan on authors  (cost=0.00..20310.00 rows=1000000 width=50) (actual time=0.059..267.217 rows=1000000 loops=1)
   -&gt;  Hash  (cost=1270.00..1270.00 rows=50000 width=88) (actual time=38.054..38.054 rows=50000 loops=1)
         Buckets: 4096  Batches: 2  Memory Usage: 2948kB
         -&gt;  Seq Scan on publications  (cost=0.00..1270.00 rows=50000 width=88) (actual time=0.010..14.211 rows=50000 loops=1)
 Planning time: 0.489 ms
 Execution time: 960.482 ms
(8 rows)
&lt;/pre&gt;


&lt;p&gt;Postgres’s &lt;span class="code"&gt;EXPLAIN&lt;/span&gt; command displays the query plan, a
tree data structure containing instructions that Postgres follows when it
executes the query. By using &lt;span class="code"&gt;EXPLAIN ANALYZE&lt;/span&gt; we ask
Postgres to execute the query also, displaying time and data metrics when its
finished. We can see in this example there were one million records in the
authors table and 50 thousand records in the publications table. At the bottom
we see that the join operation took a total of 960ms to finish.&lt;/p&gt;

&lt;p&gt;&lt;span class="code"&gt;EXPLAIN ANALYZE&lt;/span&gt; also tells us how many buckets and
batches the hash table used:&lt;/p&gt;

&lt;pre&gt;
Buckets: 4096  Batches: 2  Memory Usage: 2948kB
&lt;/pre&gt;


&lt;p&gt;Like my diagram above, this query used 2 batches: Only half of the data fit
into the 4MB working memory buffer! Postgres saved the other half of the data
in the file buffer.&lt;/p&gt;

&lt;h2&gt;Increasing work_mem&lt;/h2&gt;

&lt;p&gt;Now let’s increase the size of the working memory buffer by editing the &lt;span
class="code"&gt;postgresql.conf&lt;/span&gt; file and restarting the Postgres server.&lt;/p&gt;

&lt;p&gt;First, I stop my Postgres server:&lt;/p&gt;

&lt;pre&gt;
$ launchctl unload homebrew.mxcl.postgresql.plist
&lt;/pre&gt;


&lt;p&gt;Then I edit &lt;span class="code"&gt;postgresql.conf&lt;/span&gt;:&lt;/p&gt;

&lt;pre&gt;
$ vim /usr/local/var/postgres/postgresql.conf
&lt;/pre&gt;


&lt;p&gt;…uncommenting and changing the setting:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/1/22/work_mem2.png"/&gt;&lt;/p&gt;

&lt;p&gt;Finally I restart my server and repeat the test:&lt;/p&gt;

&lt;pre&gt;
$ launchctl load homebrew.mxcl.postgresql.plist
&lt;/pre&gt;




&lt;pre style="font-size: 10px"&gt;
&gt; explain analyze select title, company from publications, authors where author = name;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=1895.00..32705.00 rows=50000 width=72) (actual time=59.224..624.716 rows=21 loops=1)
   Hash Cond: ((authors.name)::text = (publications.author)::text)
   -&gt;  Seq Scan on authors  (cost=0.00..20310.00 rows=1000000 width=50) (actual time=0.031..146.327 rows=1000000 loops=1)
   -&gt;  Hash  (cost=1270.00..1270.00 rows=50000 width=88) (actual time=34.436..34.436 rows=50000 loops=1)
         Buckets: 8192  Batches: 1  Memory Usage: 5860kB
         -&gt;  Seq Scan on publications  (cost=0.00..1270.00 rows=50000 width=88) (actual time=0.008..13.382 rows=50000 loops=1)
 Planning time: 0.481 ms
 Execution time: 625.796 ms
(8 rows)
&lt;/pre&gt;


&lt;p&gt;You can see the number of batches is now 1, and the memory usage increased to
5.8MB:&lt;/p&gt;

&lt;pre&gt;
Buckets: 8192  Batches: 1  Memory Usage: 5860kB
&lt;/pre&gt;


&lt;p&gt;Postgres was able to use a working memory buffer size larger than 4MB. This
allowed it to save the entire data set into a single, in memory hash table and
avoid using temporary buffer files.&lt;/p&gt;

&lt;p&gt;Because of this, the total execution time decreased from 960ms to 625ms:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2016/1/22/chart.png"/&gt;&lt;/p&gt;

&lt;h2&gt;Too Good To Be True&lt;/h2&gt;

&lt;p&gt;If memory intensive Postgres SQL statements could run so much faster, why does
Postgres use only 4MB by default for the working memory buffer size? In this
example I increased &lt;span class="code"&gt;work_mem&lt;/span&gt; modestly from 4MB to
8MB &amp;ndash; why not increase it to 1GB or 10GB? Why not use all of your server’s
available memory to run all of your SQL statements as fast as possible, all of
the time? That’s why you bought that fat box to host your Postgres server,
isn’t it?&lt;/p&gt;

&lt;p&gt;This result seems too easy, too good to be true. And it is.&lt;/p&gt;

&lt;p&gt;Database servers like Postgres are optimized to handle many small, concurrent
requests at the same time. Each request needs its own working memory buffer.
Not only that, each SQL statement Postgres executes might require multiple
memory buffers, one for each join or sort operation the query plan calls for.&lt;/p&gt;

&lt;div style="float: right; padding: 0px 30px 50px 10px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2016/1/22/bp1.png"&gt;&lt;br/&gt;
&lt;/div&gt;


&lt;p&gt;My Postgres server isn’t entirely dedicated to executing this one example SQL
statement and nothing else. By increasing the value of &lt;span
class="code"&gt;work_mem&lt;/span&gt;, I’ve increased it server-wide for every request,
not just for my one slow hash join. Given the same amount of total RAM
available on the server box, increasing &lt;span class="code"&gt;work_mem&lt;/span&gt;
means Postgres can handle fewer concurrent requests before running out of
memory.&lt;/p&gt;

&lt;p&gt;However, it certainly might be the case that 8MB or some larger value for &lt;span
class="code"&gt;work_mem&lt;/span&gt; is appropriate given the amount of memory I have,
and the number of concurrent connections I expect.&lt;/p&gt;

&lt;p&gt;Be smart about how you configure your Postgres server. Don’t blindly accept the
default values, or guess what they should be at the moment you install
Postgres. Instead, after your application is finished and running in
production, look for memory intensive SQL statements. Measure the SQL queries
your application actually executes. Take their blood pressure using the &lt;span
class="code"&gt;EXPLAIN ANALYZE&lt;/span&gt; command; you might find they are memory
starved!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Look at How Postgres Executes a Tiny Join</title>
    <link href="http://patshaughnessy.net/2015/11/24/a-look-at-how-postgres-executes-a-tiny-join" rel="alternate"/>
    <id>http://patshaughnessy.net/2015/11/24/a-look-at-how-postgres-executes-a-tiny-join</id>
    <published>2015-11-24T04:00:00Z</published>
    <updated>2015-11-24T04:00:00Z</updated>
    <category>ruby</category>
    <author>
      <name></name>
    </author>
    <summary type="html">&lt;div style="float: left; padding: 7px 30px 0px 0px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2015/11/24/lecture-hall.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;
  Reading the Postgres source code is like attending a free&lt;br/&gt; Computer Science lecture, complete with working examples.
  &lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;Aside from saving and retrieving data, the primary feature of a relational
database is the ability </summary>
    <content type="html">&lt;div style="float: left; padding: 7px 30px 0px 0px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2015/11/24/lecture-hall.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;
  Reading the Postgres source code is like attending a free&lt;br/&gt; Computer Science lecture, complete with working examples.
  &lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;Aside from saving and retrieving data, the primary feature of a relational
database is the ability to execute join queries, to &lt;em&gt;relate&lt;/em&gt; data in one table
with data from another. While many developers are turning to NoSQL solutions,
joining one set of data values with another remains one of our most common and
important use cases while writing server code.&lt;/p&gt;

&lt;p&gt;But what does the word “join” actually mean? And what really happens when I
execute a join query?  Too often we take our tools for granted, without really
understanding what they are doing. This month I decided to look at the source
code for &lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt;, a popular open source
database server, to see how it implements join queries.&lt;/p&gt;

&lt;p&gt;Reading and experimenting with the Postgres source code turned out to be a
great learning experience. Today I’d like to report my observations; I&amp;rsquo;ll
show you exactly how Postgres executed a tiny join consisting of just a few
records, using the &lt;em&gt;hash join&lt;/em&gt; algorithm. In future articles I’ll show you some
interesting optimizations Postgres uses for larger joins, and other computer
science algorithms at work inside of Postgres.&lt;/p&gt;

&lt;h2&gt;What is a Join?&lt;/h2&gt;

&lt;p&gt;But before we get to the Postgres source code, let’s start by reviewing what
join queries are. Here&amp;rsquo;s an introduction from &lt;a href="http://www.postgresql.org/docs/current/static/tutorial-join.html"&gt;the excellent Postgres
documentation&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/postgres-join-tutorial.png"/&gt;&lt;/p&gt;

&lt;p&gt;The Postgres docs then explain how to use joins: inner vs. outer joins, joining
a table with itself, etc. But I’m intrigued by the highlighted disclaimer.
What is that “more efficient manner?” And how could Postgres possibly get away
with not “actually comparing each possible pair of rows?”&lt;/p&gt;

&lt;h2&gt;A Tiny Join&lt;/h2&gt;

&lt;p&gt;As an example today let’s work with two tables: &lt;em&gt;publications&lt;/em&gt;, which contains
three ground breaking computer science journal articles I never read in
college, and &lt;em&gt;authors&lt;/em&gt;, which records where each author worked.&lt;/p&gt;

&lt;pre&gt;
&gt; select * from publications;

                         title                          |   author   | year 
--------------------------------------------------------+------------+------
 A Relational Model of Data for Large Shared Data Banks | Edgar Codd | 1970
 Relational Completeness of Data Base Sublanguages      | Edgar Codd | 1972
 The Transaction Concept: Virtues and Limitations       | Jim Gray   | 1981
(3 rows)

&gt; select * from authors;

    name    |         company         
------------+-------------------------
 Edgar Codd | IBM Research Laboratory
 Jim Gray   | Tandem Computers
(2 rows)
&lt;/pre&gt;


&lt;p&gt;Today’s goal is to understand exactly what happens when Postgres joins one table with the other:&lt;/p&gt;

&lt;pre&gt;
&gt; select title, company from publications, authors where author = name;

                         title                          |         company         
--------------------------------------------------------+-------------------------
 Relational Completeness of Data Base Sublanguages      | IBM Research Laboratory
 A Relational Model of Data for Large Shared Data Banks | IBM Research Laboratory
 The Transaction Concept: Virtues and Limitations       | Tandem Computers
(3 rows)
&lt;/pre&gt;


&lt;h2&gt;A Conceptual Model for Joining Two Tables&lt;/h2&gt;

&lt;p&gt;Before we look at the algorithm Postgres actually uses, let’s review what join
queries do conceptually. Above the documentation stated that Postgres
implements joins by “comparing each possible pair of rows,” and then selecting
“the pairs of rows where these values match.”&lt;/p&gt;

&lt;p&gt;Reading this I imagine Postgres takes each publication and loops over all of
the authors, looking for that publication’s author:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/scan1.png"/&gt;&lt;/p&gt;

&lt;p&gt;In blue on the left are the publications, and I show the author records on the
right in green. This process of iterating over the rows in the authors table is
known as a scan in the Postgres source code. We are scanning over all of the
authors for the first publication, trying to find matching names.&lt;/p&gt;

&lt;p&gt;What do we do with each publication-author pair? We have to evaluate the &lt;span
class="code"&gt;WHERE&lt;/span&gt; clause from my example SQL statement:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/where1.png"/&gt;&lt;/p&gt;

&lt;p&gt;Do the names match? Yes. This pair should be included in the result set. What
about the second pair?&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/where2.png"/&gt;&lt;/p&gt;

&lt;p&gt;Do these names match? This time they don’t &amp;ndash; this pair of rows should be
filtered out.&lt;/p&gt;

&lt;p&gt;Once we have a matching pair of rows, we copy just the selected columns into a
new, joined record and return that to the client:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/select1.png"/&gt;&lt;/p&gt;

&lt;h2&gt;A Nested Loop&lt;/h2&gt;

&lt;p&gt;What’s wrong with this conceptual model? It seems like a very simple,
straightforward way of obtaining the values we need. If we proceed to scan
through the rest of the publications, it produces the same result that Postgres
does, although in a different order. (We’ll see why the order changes later.)&lt;/p&gt;

&lt;p&gt;The problem is that it’s very inefficient. First we scan over all of the
authors for the first row in the publications table:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/scan1b.png"/&gt;&lt;/p&gt;

&lt;p&gt;And then we repeat the same scan of the authors table for the second
publication:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/scan2.png"/&gt;&lt;/p&gt;

&lt;p&gt;And again for the third row. To find all of the matching pairs, in fact, we
need to loop over all the authors for each publication:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/scan3.png"/&gt;&lt;/p&gt;

&lt;p&gt;For my tiny query this isn’t a problem. There are 3*2 or 6 combinations of
rows; comparing names 6 times would only take a few microseconds on a modern
computer. However, as the number of rows increases in either table, the total
number of comparisons will explode. If we have 1000 publications and 1000
authors, suddenly we would have to compare name strings 1000*1000 or 1 million
times! Computer scientists describe this algorithm as O(n&lt;sup&gt;2&lt;/sup&gt;).&lt;/p&gt;

&lt;p&gt;But do we really need to search the entire authors table for each publication?
“Edgar Codd” appears in the publications table twice &amp;ndash; why do we need to scan
the authors table for the same name more than once? After we find Edgar the
first time, there should be some way of recording where he was so we can find
him again. And even if there were no repeated author names in publications, it
still seems wasteful to loop over the authors table over and over again. There
must be some way of avoiding all of these repeated scans.&lt;/p&gt;

&lt;p&gt;And there is; we can use a &lt;em&gt;hash table&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Avoiding Repeated Scans&lt;/h2&gt;

&lt;p&gt;The problem with our naive algorithm, the conceptual model from the Postgres
documentation, is that we loop over the authors table over and over again. To
avoid those repeated loops, imagine if we scanned the authors only once and
then saved them in some kind of data structure:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/bag1.png"/&gt;&lt;/p&gt;

&lt;p&gt;Now that we have the author records, what do we need to do with them? Well, we
have to scan the publications, obtain each publication’s author, and find the
matching author records, if any. In other words, we need to be able to quickly
and easily find the author record with a given name:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/bag2.png"/&gt;&lt;/p&gt;

&lt;p&gt;You’ve probably seen this data structure before; in fact, it might be something
you use everyday in your own code. If you’re a Rubyist like me, you call this a
&lt;em&gt;hash&lt;/em&gt;. If you prefer Python it’s a &lt;em&gt;dictionary&lt;/em&gt;, or in Clojure it’s &lt;em&gt;hash map&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With all the authors organized by their names, we can scan over the
publications and quickly find out if there’s a matching author record:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/bag3.png"/&gt;&lt;/p&gt;

&lt;p&gt;But what are hash tables, exactly? And how do they work? If only we could go
back in time and sneak back into our college Computer Science classroom again.
But if you installed Postgres from source, using Homebrew or with some Linux
package manager, you already have an open source, world class implementation of
the hash table algorithm right on your computer! To learn more about it
all we have to do is read the Postgres source code.&lt;/p&gt;

&lt;h2&gt;Calculating Hashes&lt;/h2&gt;

&lt;p&gt;It turns out that for this query Postgres actually hashes the publications and
then iterates over the authors. Before starting to execute a query, Postgres
first parses the SQL we give it and generates a “query plan.” Probably because
the publications table is larger (I’m not sure), Postgres’s query planner
decides to save the publications, not the authors, in the hash table.&lt;/p&gt;

&lt;p&gt;To do this, Postgres has to scan the publications just as we did above:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/scan4.png"/&gt;&lt;/p&gt;

&lt;p&gt;And for each publication, Postgres selects just two of the three columns:
author and title. Postgres refers to the query plan and finds out it will need
the author for the &lt;span class="code"&gt;WHERE&lt;/span&gt; join condition, and the
title for the final &lt;span class="code"&gt;SELECT&lt;/span&gt; returning the result set.
It leaves the year values behind.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/project1.png"/&gt;&lt;/p&gt;

&lt;div style="float: right; padding: 7px 0px 20px 30px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2014/9/23/codd.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;Edgar Codd&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;This process of selecting the desired attributes from the matching pair is
known in the Postgres C source code as a &lt;em&gt;projection&lt;/em&gt;. We “project” a few values
from one set of columns to another. (The term &lt;em&gt;project&lt;/em&gt; is actually much older
even than Postgres; Edgar Codd first used it in this context in &lt;a href="https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf"&gt;A Relational
Model of Data for Large Shared Data
Banks&lt;/a&gt; back in 1970.)&lt;/p&gt;

&lt;p&gt;Next Postgres calculates a &lt;em&gt;hash&lt;/em&gt; based on the author string. A hash is some
integer value that can be calculated quickly in a repeatable, reproducible way.
For the same author string, e.g. “Edgar Codd,” Postgres always calculates the
same hash number. As we’ll see in a moment, Postgres uses the hash value to
decide where to save the author name in the hash table.&lt;/p&gt;

&lt;p&gt;You can find Postgres’s hash algorithm in a C file called hashfunc.c. Even if
you’re not a C developer, there are extensive code comments explaining what’s
going on, along with a link to &lt;a href="http://burtleburtle.net/bob/hash/doobs.html"&gt;an article written by Bob
Jenkins&lt;/a&gt;, who developed the
algorithm in 1997.&lt;/p&gt;

&lt;p&gt;
&lt;div class="sign"&gt;
  &lt;div class="sign-icon"&gt;&lt;/div&gt;
  &lt;div class="function-info"&gt;
    &lt;div class="function-name"&gt;hash_any&lt;/div&gt;
    &lt;div class="function-link"&gt;&lt;a href="http://doxygen.postgresql.org/hashfunc_8c.html#a364b7d134ec3c770a3b40abf15b05d37"&gt;view on postgresql.org&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="function-code"&gt;
    &lt;img src="http://patshaughnessy.net/assets/2015/11/24/hash_any.png"/&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;


&lt;p&gt;In my example, Postgres passes “Edgar Codd,” the string value in the author
column in the first publication record, to &lt;span class="code"&gt;hash_any&lt;/span&gt;.
The complex bitwise calculations in &lt;span class="code"&gt;hash_any&lt;/span&gt; step
over the characters in Edgar’s name and return this hash value:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/hash1.png"/&gt;&lt;/p&gt;

&lt;h2&gt;Using a Bitmask to Choose a Hash Bucket&lt;/h2&gt;

&lt;p&gt;Now that it has a hash, what does Postgres do with it? You can see a clue above
in the C comments:&lt;/p&gt;

&lt;blockquote&gt;
The best hash table sizes are powers of 2.  There is no need to do mod a prime
(mod is sooo slow!). If you need less than 32 bits, use a bitmask.
&lt;/blockquote&gt;


&lt;p&gt;A hash table consists of an array of “buckets,” which are a series of pointers
to linked lists. Initially Postgres creates an empty array of bucket pointers
just before starting to scan the publications:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/buckets1.png"/&gt;&lt;/p&gt;

&lt;p&gt;As you can guess, Postgres saves each publication in one of the buckets in the
hash table, based on the calculated hash value. Later when it scans over the
authors, it will be able to find the publications again quickly by
recalculating the same hash values. Instead of scanning over all of the
publications again, Postgres can just look up each publication’s author using
the hash. The hash is a record of where each publication is saved in the hash
table.&lt;/p&gt;

&lt;p&gt;However, if two publications turn out to have the same author, as we have in
our example, then Postgres will have to save them both in the same bucket. This
is why each bucket is a linked list; each bucket has to save more than one
publication.&lt;/p&gt;

&lt;p&gt;Because our example has three publications, does Postgres use a hash table with
three buckets? Or with two buckets, because of the repeated author value? No.
It actually uses 1024 buckets! Why 1024? For two reasons: First, Postgres was
designed to query large amounts of data. Its hash join algorithm was optimized
to handle extremely large data sets, containing millions of records or even
more. A table containing three records is truly tiny! Postgres doesn’t bother
with small hash tables and uses a minimum size of 1024.&lt;/p&gt;

&lt;p&gt;And why a power of two? This makes it easier to decide which bucket to use for
a given hash. Instead of trying to return hash values that match the number of
buckets, it’s easier and faster to always returns very large values. What
Postgres does instead is distribute the large hash values evenly over the number
of buckets it does have. By choosing a power of two for the bucket array size,
Postgres can use a fast bitwise operation to decide which bucket to save each
publication in, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/hash2.png"/&gt;&lt;/p&gt;

&lt;p&gt;Above you can see how Postgres decides where to put “Edgar Codd” in the hash
table: It subtracts one from the number of buckets: 1024-1 = 1023. Written in
binary this is 1111111111. Then using your microprocessor’s binary computing
circuits, Postgres quickly masks out the left bits, and keeps just the 10 least
significant or rightmost bits. This yields 0000001111 binary, or the number 15.
Using this fast calculation, Postgres decides to save Edgar in bucket #15:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/buckets2.png"/&gt;&lt;/p&gt;

&lt;p&gt;Postgres also saves the title string, because it will need it later to produce
the final result set. Along with the two strings, Postgres saves the hash value
and a “next” pointer that will form the linked list.&lt;/p&gt;

&lt;h2&gt;Building the Rest of the Hash Table&lt;/h2&gt;

&lt;p&gt;Postgres now continues to scan over the publications, arriving at the second
publication.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/scan5.png"/&gt;&lt;/p&gt;

&lt;p&gt;We have Edgar again! Clearly he was a central figure behind database theory.
Calculating the hash again for the same string will always return the same
value: 2130627599, yielding bucket #15 a second time. We know the Edgar Codd
records will always appear in bucket 15.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/buckets3.png"/&gt;&lt;/p&gt;

&lt;p&gt;Also notice that Postgres saves each new publication at the head of the linked
list &amp;ndash; this means we have the second Edgar publication first on the left, and
Edgar’s first publication second on the right. As we’ll see next, this yields
the reverse order of Edgar’s records we saw above in the conceptual algorithm.&lt;/p&gt;

&lt;p&gt;Finally Postgres continues scanning and saves the third publication in the hash
table; this time Postgres calculates a hash for “Jim Gray:”&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/hash3.png"/&gt;&lt;/p&gt;

&lt;p&gt;You can see this time the 10 rightmost bits of 3344886182 evaluate to 422. So
Postgres saves Jim in bucket #422. Drawing the bucket array more to scale it
might look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/buckets4.png"/&gt;&lt;/p&gt;

&lt;h2&gt;Scanning Buckets&lt;/h2&gt;

&lt;p&gt;After saving all the publications in the hash table, Postgres can now scan over
the authors table:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/scan6.png"/&gt;&lt;/p&gt;

&lt;p&gt;Now finding the matching publication is simple. Instead of scanning over all
the publications, Postgres simply calls the hash function again on the name
string from the authors table, and repeats the bitmask operation. Because the
first author record is Edgar, Postgres knows the matching publications will be
in bucket #15.&lt;/p&gt;

&lt;p&gt;In our tiny example, the only records in bucket 15 will be for Edgar Codd. But
remember in a large SQL query there might be millions of publications. It’s
possible that publications with different authors might appear in this bucket.
This would happen because either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The hash function returned the same hash number for two different author
strings. This is possible but unlikely. In Computer Science this would be known
as a &lt;em&gt;hash collision&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The 10 least significant bits of the hash were the same. For millions of
publications this would happen frequently. However, as the number of records in
the join increases Postgres uses more and more bits in the bitmask. 1024 (10
bits) was the minimum number it uses for our tiny query. Still, hash table
buckets in practice will contain multiple key values.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Therefore, Postgres has to check each author in the matching bucket to be sure
that it’s a match. This process is known as &lt;em&gt;scanning the bucket&lt;/em&gt;. To do this,
Postgres first checks the hash values:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/scan-buckets1.png"/&gt;&lt;/p&gt;

&lt;p&gt;This is a simple numerical comparison and so is quite fast. And if the hashes
are the same, Postgres checks the actual strings just in case the hash function
did return the same hash for different strings:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/scan-buckets2.png"/&gt;&lt;/p&gt;

&lt;p&gt;Because the author names match, Postgres can finally perform the join!  To do
this, it projects the columns that our query selects into a single joined
record, in the desired order:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/select2.png"/&gt;&lt;/p&gt;

&lt;p&gt;This becomes the first record in our result set.&lt;/p&gt;

&lt;h2&gt;Returning Multiple Records: The Hash Join State Machine&lt;/h2&gt;

&lt;p&gt;One of the most beautiful and important aspects of the Postgres implementation
is the way it orchestrates building up and searching the hash table in the
midst of a larger enclosing SQL expression. To see this for yourself, take a
look at the hash join implementation, in nodeHashJoin.c.&lt;/p&gt;

&lt;p&gt;
&lt;div class="sign"&gt;
  &lt;div class="sign-icon"&gt;&lt;/div&gt;
  &lt;div class="function-info"&gt;
    &lt;div class="function-name"&gt;ExecHashJoin&lt;/div&gt;
    &lt;div class="function-link"&gt;&lt;a href="http://doxygen.postgresql.org/nodeHashjoin_8c.html#a538698b031186193de7da58537820e61"&gt;view on postgresql.org&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="function-code"&gt;
    &lt;img src="http://patshaughnessy.net/assets/2015/11/24/ExecHashJoin.png"/&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;


&lt;p&gt;Postgres calls &lt;span class="code"&gt;ExecHashJoin&lt;/span&gt; once for each record in the join result set. For
our example with 3 result records Postgres calls &lt;span class="code"&gt;ExecHashJoin&lt;/span&gt; three times.
&lt;span class="code"&gt;ExecHashJoin&lt;/span&gt; keeps track of how many times it has been called, and what it
needs to do next, using a state machine.&lt;/p&gt;

&lt;p&gt;The best way to understand how this state machine works, and how it fits into
the larger structure of Postgres’s architecture, is to imagine that we asked
for one record at a time. For example, imagine that we select just a single
record from the join:&lt;/p&gt;

&lt;pre&gt;
select title, company from publications, authors where author = name limit 1
&lt;/pre&gt;


&lt;p&gt;By appending &lt;span class="code"&gt;limit 1&lt;/span&gt; we tell Postgres to stop after 1
record. For this query, to return just one record, &lt;span class="code"&gt;ExecHashJoin&lt;/span&gt; will use the
following states in its state machine:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/states1.png"/&gt;&lt;/p&gt;

&lt;p&gt;Here’s what &lt;span class="code"&gt;ExecHashJoin&lt;/span&gt; does to obtain the first joined record:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="code"&gt;HJ_BUILD_HASHTABLE&lt;/span&gt;: This code builds the hash table by scanning over all
the publications records, as we saw above. Postgres calls publications the
“inner relation.”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="code"&gt;HJ_NEED_NEW_OUTER&lt;/span&gt;: This code starts scanning the “outer relation” or the
authors table in this example, and returns a single record.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="code"&gt;HJ_SCAN_BUCKET&lt;/span&gt;: This code takes one outer relation record (an author) and
looks for the matching inner relation records in the hash table (publications).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Now imagine that I ask Postgres for two records, by using limit 2:&lt;/p&gt;

&lt;pre&gt;
select title, company from publications, authors where author = name limit 2
&lt;/pre&gt;


&lt;p&gt;The second time Postgres calls &lt;span class="code"&gt;ExecHashJoin&lt;/span&gt;, it only
executes &lt;span class="code"&gt;HJ_NEED_NEW_OUTER&lt;/span&gt; and &lt;span
class="code"&gt;HJ_SCAN_BUCKET&lt;/span&gt; &amp;ndash; it already created the hash table the
first time it was called:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/11/24/states2.png"/&gt;&lt;/p&gt;

&lt;p&gt;Postgres pays the large price of scanning the entire inner relation and
building the hash table as soon as you ask for one record. Returning the second
and all subsequent records is much faster because Postgres already has the hash
table.&lt;/p&gt;

&lt;p&gt;If you read the C code you’ll see some interesting optimizations. For example,
Postgres actually scans the outer relation first to get a single record, just
in case it might be empty. (This is what the C comment above refers to.)
There’s no need to build a hash table if we’re not going to look up any values!
Also, the &lt;span class="code"&gt;HJ_FILL_INNER&lt;/span&gt; and &lt;span
class="code"&gt;HJ_FILL_OUTER&lt;/span&gt; states handle executing right
or left outer joins respectively. &lt;span class="code"&gt;ExecHashJoin&lt;/span&gt;
implements these as well.&lt;/p&gt;

&lt;p&gt;By using a state machine like this Postgres can execute this join inside the
context of a large, complex SQL statement. It could be that we are joining
together result sets from complex inner SQL clauses, or that the result set
from this join becomes part of a larger expression. The state inside of &lt;span
class="code"&gt;ExecHashJoin&lt;/span&gt; allows Postgres to keep track of what is was
doing &amp;ndash; and of what it needs to do next &amp;ndash; in the appropriate place on the
execution stack.&lt;/p&gt;

&lt;h2&gt;What’s Next?&lt;/h2&gt;

&lt;p&gt;The last state value handled by &lt;span class="code"&gt;ExecHashJoin&lt;/span&gt;,
HJ_NEED_NEW_BATCH, handles the case where the hash table doesn’t fit into
the server’s memory. In this case, Postgres will create a series of hash tables
and save some of them out to disk in “batch files.” This algorithm is what the term
&lt;a href="https://en.wikipedia.org/wiki/Hash_join"&gt;Hybrid Hashjoin&lt;/a&gt; refers to.&lt;/p&gt;

&lt;p&gt;When I have time, I’d love to write about how Postgres handles a large join
instead of a tiny one: How do batch files work? What configuration settings
have an effect on batch files and join performance? And there’s also an
interesting optimization Postgres uses for frequently occurring join key
values.&lt;/p&gt;

&lt;p&gt;Postgres does some amazing things internally to speed up your queries; it’s
time to shed some light on the great work the Postgres open source community
has done over the years!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>What Do Perl and Go Have in Common?</title>
    <link href="http://patshaughnessy.net/2015/9/25/what-do-perl-and-go-have-in-common" rel="alternate"/>
    <id>http://patshaughnessy.net/2015/9/25/what-do-perl-and-go-have-in-common</id>
    <published>2015-09-25T03:00:00Z</published>
    <updated>2015-09-25T03:00:00Z</updated>
    <category>ruby</category>
    <author>
      <name></name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;TL/DR:&lt;/strong&gt; &lt;em&gt;Both Perl and Go only partially implement object oriented
programming, in a confusing way. Using either language you can create
structures equivalent to objects but without using keywords such as &lt;span
class="code"&gt;class&lt;/span&gt; or &lt;span class="code"&gt;new&lt;/span&gt;.  Converting a Go
function into a method by adding a receiver reminds me of &amp;ldquo;blessing&amp;rdquo; a Perl has</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;TL/DR:&lt;/strong&gt; &lt;em&gt;Both Perl and Go only partially implement object oriented
programming, in a confusing way. Using either language you can create
structures equivalent to objects but without using keywords such as &lt;span
class="code"&gt;class&lt;/span&gt; or &lt;span class="code"&gt;new&lt;/span&gt;.  Converting a Go
function into a method by adding a receiver reminds me of &amp;ldquo;blessing&amp;rdquo; a Perl hash
reference.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s hard to imagine two programming languages that are more different. Larry
Wall created Perl  almost 30 years ago in 1987. Google introduced Go much more
recently in 2009. Perl is a dynamic, interpreted language while Go uses a
compiler and static types. Perl syntax is quirky, fun and sometimes bizarre,
while Go syntax is clean and simple, almost boring at times.&lt;/p&gt;

&lt;p&gt;This year, coincidentally, I tried to learn both Perl and Go around the same
time. Oddly, I found something in common between these two dramatically
different languages. They both allow you to create objects and to write
methods, but without supporting &lt;span class="code"&gt;class&lt;/span&gt;, &lt;span
class="code"&gt;new&lt;/span&gt; or other keywords found in traditional object oriented
languages like Smalltalk, Java, Ruby or Python.  Both languages leave the door
partially open to object oriented design, but don’t provide the syntax or
features you expect and need for using objects and classes.&lt;/p&gt;

&lt;h2&gt;Writing a Perl Function&lt;/h2&gt;

&lt;p&gt;Let’s suppose I want to calculate the density of Jupiter, based on its mass and
diameter. Using Perl, I could write:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/perl1.png"/&gt;&lt;/p&gt;

&lt;div style="float: right; padding: 25px 8px 0px 30px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2015/9/25/vw.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;
  Writing Perl feels like riding a vintage VW bus. Things don’t&lt;br/&gt;
  work the way you expect, but you can always feel the love.
&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;As you can see, Perl’s syntax is somewhat odd: The &lt;span class="code"&gt;my&lt;/span&gt;
keyword indicates each variable belongs to the local lexical scope. The &lt;span
class="code"&gt;shift&lt;/span&gt; keywords pull the mass and radius values from an
array of values Perl implicitly passes to every function &amp;ndash; Perl functions
always take a single array argument! And you have to prefix all of the
identifiers with either a &lt;span class="code"&gt;$,&lt;/span&gt; &lt;span
class="code"&gt;@&lt;/span&gt; or &lt;span class="code"&gt;%&lt;/span&gt; character to indicate
whether it is a scalar (simple value), an array or a hash. Sometimes in more
complex Perl code you have to combine these prefixes together in cryptic
patterns, such as &lt;span class="code"&gt;@$var&lt;/span&gt;, or &lt;span
class="code"&gt;%$var&lt;/span&gt;. Thankfully in this simple function I just use
numeric values, so &lt;span class="code"&gt;$&lt;/span&gt; is sufficient.&lt;/p&gt;

&lt;p&gt;To me, Perl feels like an old-fashioned, awkward version of Ruby. And this
makes some sense. Perl was to some extent the model for both Ruby and Python,
which were created just a few years after Perl in the early 1990s. Ruby and
Python smoothed out the rough edges of Perl’s syntax (along with adding proper
support for objects among other things).&lt;/p&gt;

&lt;h2&gt;Creating a Perl Object&lt;/h2&gt;

&lt;p&gt;Now I decide to use an object oriented style instead. I want a Jupiter object
which has mass and radius attributes, and I’d like the density function to be a
method, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/perl2.png"/&gt;&lt;/p&gt;

&lt;p&gt;In other words, I’d like to think of &lt;span class="code"&gt;$jupiter&lt;/span&gt; as an
instance of the Planet class.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/jupiter-class.png"/&gt;&lt;/p&gt;

&lt;p&gt;By writing a &lt;span class="code"&gt;Planet&lt;/span&gt; class, I group together data
values that describe each planet (mass and radius) with the functions that use
those values (density).  Object oriented languages refer to the data values as
&lt;em&gt;instance variables&lt;/em&gt;, and the functions as &lt;em&gt;methods&lt;/em&gt;. By creating a class, I now
have a natural place to gather functions and attributes related to planets.&lt;/p&gt;

&lt;p&gt;The problem is that Perl isn’t an object oriented language. There’s no way to
declare a class, define methods or create objects which are instances of that
class. However, a few years after Perl was invented, in the mid 1990s, Larry
Wall and the Perl team introduced some support for object oriented programming
concepts in Perl 5. They converted Perl into an object oriented language after
the fact &amp;ndash; at least a partially object oriented language.&lt;/p&gt;

&lt;p&gt;To create a Perl class, I first group my planet functions together using the Perl &lt;span class="code"&gt;package&lt;/span&gt; keyword. In this example I have only one:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/perl3.png"/&gt;&lt;/p&gt;

&lt;p&gt;This gives me a place to put all of the methods of the &lt;span
class="code"&gt;Planet&lt;/span&gt; class &amp;ndash; the &lt;span class="code"&gt;package&lt;/span&gt;
keyword plays the same role the &lt;span class="code"&gt;class&lt;/span&gt; keyword would
in Java or Ruby, to some extent. Also notice that I’ve rewritten my function to
use object oriented syntax.  Instead of obtaining the mass and radius from the
parameters array, I get a single parameter which I call &lt;span
class="code"&gt;$self&lt;/span&gt;. Then I use &lt;span class="code"&gt;$self&lt;/span&gt; as a hash
reference to get the mass and radius values, for example: &lt;span
class="code"&gt;$self-&gt;{&amp;lsquo;mass&amp;rsquo;}&lt;/span&gt;. This is object oriented code. I’ve created
a class and added a method to it.&lt;/p&gt;

&lt;p&gt;However, let’s think about this for another moment:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/words1.png"/&gt;&lt;/p&gt;

&lt;p&gt;Notice there’s a difference between what I want to say, and the words I have to
use to say it. The Perl language doesn’t include the &lt;span
class="code"&gt;class&lt;/span&gt; keyword; instead, I need to use &lt;span
class="code"&gt;package&lt;/span&gt;. We’ll see this again in a moment.&lt;/p&gt;

&lt;p&gt;To create an instance of my new &lt;span class="code"&gt;Planet&lt;/span&gt; class, an
object, I need to create a hash (technically a reference to a hash) and then
“bless” it:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/perl4.png"/&gt;&lt;/p&gt;

&lt;p&gt;This creates a connection between the hash (the object) and the package that
contains the methods I want to use (the class). Now I can use syntax such as
&lt;span class="code"&gt;$jupiter-&gt;density()&lt;/span&gt;. I’ve done it! I’ve created an object using Perl.&lt;/p&gt;

&lt;p&gt;However, once again the language doesn’t supply the words I want to use to
express the idea I’m thinking of:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/words2.png"/&gt;&lt;/p&gt;

&lt;h2&gt;Expressing Object Oriented Concepts Using Perl&lt;/h2&gt;

&lt;p&gt;Here’s the complete, object oriented version of my example:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/perl5.png"/&gt;&lt;/p&gt;

&lt;p&gt;To me, the Perl code I wrote above seems very confusing. But it’s not Perl’s
strange, old-fashioned syntax that confuses me. After a while, all the &lt;span
class="code"&gt;$&lt;/span&gt; symbols and the use of &lt;span class="code"&gt;shift&lt;/span&gt;
start to make sense. Writing Perl code is a bit like writing Ruby code while on
drugs &amp;ndash; I start with Ruby and just keep adding &lt;span class="code"&gt;$&lt;/span&gt; and
semicolon characters until it works.&lt;/p&gt;

&lt;p&gt;The real problem in this example is that Perl allows me to create objects and
classes, but doesn’t refer to them as objects or classes. Instead, I have
“blessed references” and “packages.” Perl allows me to get the object oriented
behavior I want, but doesn’t let me use the words I want to use to describe
what I’m doing. Perl’s partial support of object oriented programming is
confusing at best.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Perl 6, under development for the last fifteen years and still not
released, is planning to introduce more explicit support for objects using the
&lt;span class="code"&gt;class&lt;/span&gt; and &lt;span class="code"&gt;new&lt;/span&gt; keywords.&lt;/em&gt;&lt;/p&gt;

&lt;div style="float: right; padding: 25px 8px 0px 30px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2015/9/25/driverless-car.png"&gt;&lt;br/&gt;
  &lt;i&gt;
Writing Go code feels like riding in a Google driverless car:&lt;br/&gt;
the compiler and &lt;span class="code"&gt;gofmt&lt;/span&gt; tool are in complete control.
  &lt;/i&gt;
&lt;/div&gt;


&lt;h2&gt;Creating a Go Object&lt;/h2&gt;

&lt;p&gt;Perl was invented many years ago. Now let’s try using a modern, new programming
language to write the same example: Go. Along the way I’ll compare the Go
version with the Perl code I wrote above.&lt;/p&gt;

&lt;p&gt;Earlier using Perl I had to use the &lt;span class="code"&gt;package&lt;/span&gt; keyword
to define a place to put my class’s methods. In Go, I define a group of
methods in a different way: by associating them with a type. Therefore, I’ll
start my Go code by creating a &lt;span class="code"&gt;Planet&lt;/span&gt; type:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/go1.png"/&gt;&lt;/p&gt;

&lt;p&gt;The two versions look very different. In Go I define a static type that always
consists of mass and radius values, while in Perl I dynamically create a hash
that might contain any values.&lt;/p&gt;

&lt;p&gt;Once again, however, I’m forced to think about my code one way and write it
another:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/words3.png"/&gt;&lt;/p&gt;

&lt;p&gt;What Go and Perl really have in common is this: Neither language contains the
words and syntax I really would like to use to express the object oriented
concepts I’m trying to use.&lt;/p&gt;

&lt;p&gt;So far I’ve created a type, a static collection of values. Let’s take the next
step and convert that into a class:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/go2.png"/&gt;&lt;/p&gt;

&lt;p&gt;In Go I don’t need to connect my instance data with the class; the mass and
radius values are already contained inside the &lt;span class="code"&gt;Planet&lt;/span&gt;
struct type. Instead, I need to create a connection between the method and the
class. I do this by typing in a receiver for the Density function, &lt;span
class="code"&gt;func (p Planet) Density()&lt;/span&gt;, converting it into a method of
the Planet type.&lt;/p&gt;

&lt;p&gt;In Perl I “bless” a hash by connecting it to a group of functions in a package.
A blessed hash is an object in Perl. In Go I “bless” a function by connecting
it to a type containing instance data. A blessed function combined with a type
is a class in Go. The two languages both use special syntax tricks to allow for
object oriented programming, but they make the connection between instance
variables and methods from opposite directions.&lt;/p&gt;

&lt;p&gt;Once again, however, there’s an impedance mismatch between the concepts I’m
imagining and the words I have to use to to express them:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/words4.png"/&gt;&lt;/p&gt;

&lt;p&gt;Go doesn’t provide me with the vocabulary I want to use. I want to type &lt;span
class="code"&gt;class&lt;/span&gt;, but Go only allows me to use &lt;span class="code"&gt;type
struct&lt;/span&gt;. And because there’s no &lt;span class="code"&gt;class&lt;/span&gt; keyword,
my blessed function, my method, could be anywhere and not necessary right next
to my type definition.&lt;/p&gt;

&lt;h2&gt;Expressing Object Oriented Concepts Using Go&lt;/h2&gt;

&lt;p&gt;Here’s the complete, object oriented version of my example in Go:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/9/25/go3.png"/&gt;&lt;/p&gt;

&lt;p&gt;I find this Go code just as confusing and misleading as the Perl version above,
and for the same reason. Both Perl and Go take the first step towards object
oriented programming, but stop short of providing a complete solution. Instead
of objects, Go gives us C-style static structures which can have methods
associated with them. And Go doesn’t provide classes at all: There’s no natural
place to gather all of the methods belonging to a given type.&lt;/p&gt;

&lt;p&gt;We can guess that Perl 5 didn’t introduce proper support for object oriented
programming either because it was too difficult to add it to an existing
language, or for backward compatibility reasons. But the &lt;a href="http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html"&gt;designers of Go
decided from the very
beginning&lt;/a&gt;
not to support classes or objects. Then, why support methods at all? Why allow
developers to create object-like structures, but with a confusing syntax? Or
why not go all the way and introduce the &lt;span class="code"&gt;class&lt;/span&gt;
keyword to properly support object structures?&lt;/p&gt;

&lt;div style="float: right; padding: 25px 8px 0px 30px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2015/9/25/jupiter.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;
The density of Jupiter is 1,326 kg/m&lt;sup&gt;3&lt;/sup&gt;, only &lt;br/&gt;
1/4th the density of Earth. (source: &lt;a
href="http://nssdc.gsfc.nasa.gov/planetary/factsheet/jupiterfact.html"&gt;NASA&lt;/a&gt;).
&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;Go’s tepid, partial support for object oriented programming reminds me of Perl.
Writing a Go function and making it special &amp;ndash; “blessing” it &amp;ndash; by assigning it a
receiver reminds me of how I would bless a hash in a Perl program. Perhaps
Google used Perl as design inspiration for Go; perhaps they wanted to include a
small bit of Perl’s quirky, bizarre but lovable behavior in Go.&lt;/p&gt;

&lt;p&gt;Regardless, don’t stretch your programming language by using it in ways it
wasn’t intended to be used. And certainly don’t change your ideas and solutions
to fit any given programming language. Choose the programming language that has
keywords and syntax that allow you to express your ideas in a natural,
straightforward manner. The only purpose of a language, whether a human
language or programming language, is to express our abstract thoughts using
words in simple, or even beautiful, ways.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Don’t Let Your Data Out of the Database</title>
    <link href="http://patshaughnessy.net/2015/6/18/dont-let-your-data-out-of-the-database" rel="alternate"/>
    <id>http://patshaughnessy.net/2015/6/18/dont-let-your-data-out-of-the-database</id>
    <published>2015-06-18T03:00:00Z</published>
    <updated>2015-06-18T03:00:00Z</updated>
    <category>ruby</category>
    <author>
      <name></name>
    </author>
    <summary type="html">&lt;div style="float: left; padding: 7px 30px 0px 0px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2015/6/18/escape.png"&gt;&lt;br/&gt;
  &lt;i&gt;Don’t let your data escape from your database&lt;br/&gt;
  and cause unintended performance mistakes.&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;Keep your data in the database, not for security reasons but to avoid
performance mistakes. Often the best way to speed up your applicati</summary>
    <content type="html">&lt;div style="float: left; padding: 7px 30px 0px 0px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2015/6/18/escape.png"&gt;&lt;br/&gt;
  &lt;i&gt;Don’t let your data escape from your database&lt;br/&gt;
  and cause unintended performance mistakes.&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;Keep your data in the database, not for security reasons but to avoid
performance mistakes. Often the best way to speed up your application is to let
your database server do what it was designed to do: operate on data.&lt;/p&gt;

&lt;p&gt;Most modern programming languages and frameworks hide databases behind an
elegant, beautiful layer of abstraction. Developers today don’t need to write
or even understand Structured Query Language (SQL), the native language of
database servers. We view SQL as a low-level, technical relic of 1970s Computer
Science, best left behind in academic journals and college classrooms.&lt;/p&gt;

&lt;p&gt;However, not learning and thoroughly understanding SQL would be a tremendous
mistake. In fact, many data related performance problems are a result of using
a high level language, such as Ruby or Python, to work with data instead of
SQL. Keep your data where it belongs… in the database. Use your database server
to operate on your data in place, and then fetch the result your application
actually needs.&lt;/p&gt;

&lt;p&gt;Let me show you what I mean with a simple example.&lt;/p&gt;

&lt;div style="clear: both"&gt;&lt;/div&gt;


&lt;h2&gt;Posts and Comments&lt;/h2&gt;

&lt;p&gt;Suppose I have data in a one-many relationship: one post has many comments.
Using ActiveRecord, the popular Ruby ORM, I implement a one-many association by
writing:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Post&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  has_many &lt;span class="symbol"&gt;:comments&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Comment&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  belongs_to &lt;span class="symbol"&gt;:post&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ruby’s powerful dynamic behavior allows me to query the comments for a given
post in a very natural, human way:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
post = &lt;span class="constant"&gt;Post&lt;/span&gt;.find(&lt;span class="integer"&gt;1&lt;/span&gt;)
post.comments
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But remember ActiveRecord isn’t a magic framework. It doesn’t have a secret
connection to the tables in my database. It has to speak to the database server
like everyone else, using the server’s language: SQL. Reading my log file, I
can see how ActiveRecord translates &lt;span class="code"&gt;post.comments&lt;/span&gt; into SQL:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="class"&gt;select&lt;/span&gt; comments.* &lt;span class="keyword"&gt;from&lt;/span&gt; comments &lt;span class="keyword"&gt;where&lt;/span&gt; comments.post_id = &lt;span class="integer"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After executing this SQL statement, ActiveRecord converts the result set into
an array of Ruby objects which I can then use in my code. For example, if I
want the latest comment for a post I can write:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Post&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;latest_comment&lt;/span&gt;
    comments.max {|a, b| a.updated_at &amp;lt;=&amp;gt; b.updated_at }
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here I ask Ruby to sort the comment objects and return the latest one, the
comment with the maximum &lt;span class="code"&gt;updated_at&lt;/span&gt; value. Now I can
find the person who wrote the latest comment for a post just by writing:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
post.latest_comment.author
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;div style="float: right; padding: 7px 0px 50px 30px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2015/6/18/open-cell.jpg"&gt;&lt;br/&gt;
&lt;/div&gt;


&lt;h2&gt;Where Is My Data?&lt;/h2&gt;

&lt;p&gt;The problem with this approach is that it doesn’t scale. Suppose this post has
hundreds or even thousands of comments; in this case, ActiveRecord will convert
them all into Ruby objects just so I can iterate through them in the
&lt;span class="code"&gt;latest_comment&lt;/span&gt; method.&lt;/p&gt;

&lt;p&gt;My mistake was to let my data out of the database. Instead, I should have asked
the database do the work for me.&lt;/p&gt;

&lt;p&gt;Let’s take a closer look at how &lt;span class="code"&gt;latest_comment&lt;/span&gt; works:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/6/18/filter-sort.png"/&gt;&lt;/p&gt;

&lt;p&gt;On the right, I start with all of the comments in the database, tens of
thousands of them let’s say. Next, I need to search for the comments associated
with my post, filtering on the &lt;span class="code"&gt;post_id&lt;/span&gt; column. This
yields a subset, hundreds of comments for example. Finally, I sort these
filtered comments and take the last one, yielding the latest one on the left.&lt;/p&gt;

&lt;p&gt;The problem with my Ruby solution is that I perform the filtering in the
database, but the sorting in Ruby. In between, the entire subset of comments
for a post have to be transmitted from the database server to my Ruby
application server:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/6/18/ruby-sort.png"/&gt;&lt;/p&gt;

&lt;p&gt;To transmit all of these records, the database needs to serialize them to some
binary format, which my Ruby code (or my DB driver actually) later needs to
unpack. Finally, ActiveRecord has to convert this binary data into Ruby
objects.&lt;/p&gt;

&lt;p&gt;This process takes time; in particular, creating hundreds or thousands of Ruby
objects involves allocating a series of memory structures and placing them into
a large array. Using a process called “garbage collection,” Ruby might even
have to find and recycle older unused Ruby objects to hold the comments, which
would take even more time.&lt;/p&gt;

&lt;h2&gt;Databases Are Faster Than You Are&lt;/h2&gt;

&lt;p&gt;The solution is obvious: perform the search inside the database and only return
the latest comment. But how do I ask my database server to search for the
latest comment? By using ActiveRecord methods such as &lt;span class="code"&gt;where&lt;/span&gt;,
&lt;span class="code"&gt;order&lt;/span&gt; and &lt;span class="code"&gt;first&lt;/span&gt; to describe
what I want, instead of writing my own code in Ruby. This line will do the
trick:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
post.comments.order(&lt;span class="key"&gt;updated_at&lt;/span&gt;: &lt;span class="symbol"&gt;:desc&lt;/span&gt;).first
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;ActiveRecord translates this into SQL code as follows:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="class"&gt;select&lt;/span&gt; comments.* &lt;span class="keyword"&gt;from&lt;/span&gt; comments
&lt;span class="keyword"&gt;where&lt;/span&gt; comments.post_id = &lt;span class="integer"&gt;1&lt;/span&gt;
&lt;span class="keyword"&gt;order&lt;/span&gt; &lt;span class="keyword"&gt;by&lt;/span&gt; comments.updated_at &lt;span class="directive"&gt;desc&lt;/span&gt; limit &lt;span class="integer"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will run much faster than my previous solution, because my database only
transmits one comment record over the network to my Ruby server: the latest
one. And Ruby only creates one Ruby object, for the latest comment:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/6/18/db-sort.png"/&gt;&lt;/p&gt;

&lt;p&gt;Now highly optimized C code, running on the same server that holds the comments
table data, filters the comments by post, and sorts the matches by timestamp.
This code has been used and tested by millions of developers around the world
for years; don’t try to reinvent the wheel by rewriting the sort yourself using
Ruby.&lt;/p&gt;

&lt;h2&gt;Caching the Latest Comment&lt;/h2&gt;

&lt;p&gt;Suppose in my user interface I always show the author of the latest comment
next to each post. Now to display my page, I need to perform this comment
search over and over again for every post. One way to avoid the comment query
altogether would be to cache the latest comment’s author right inside the posts
table. That way I’ll get the latest comment’s author automatically when I load
the posts. No need for repeated searches, or any queries on the comments table
at all!&lt;/p&gt;

&lt;p&gt;In practice, if I’ve remembered to create indexes on the &lt;span
class="code"&gt;post_id&lt;/span&gt; and &lt;span class="code"&gt;updated_at&lt;/span&gt; columns,
the comment search SQL above will run very quickly, even if I execute it many
times. I could even load the latest comments for all the posts using single SQL
query, but for the sake of argument today, let’s explore a caching solution anyway.&lt;/p&gt;

&lt;p&gt;Again ActiveRecord makes this easy. All I need to do is write a migration like
this:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;AddLatestCommentAuthorToPosts&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Migration&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;change&lt;/span&gt;
    add_column &lt;span class="symbol"&gt;:posts&lt;/span&gt;, &lt;span class="symbol"&gt;:latest_comment_author&lt;/span&gt;, &lt;span class="symbol"&gt;:string&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now I just need to be sure to update the post each time a user writes a new
comment:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
post.update_attribute(&lt;span class="symbol"&gt;:latest_comment_author&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;Data Migration Using Ruby&lt;/h2&gt;

&lt;p&gt;Of course, I forgot something important. Using &lt;span
class="code"&gt;update_attribute&lt;/span&gt; I save the author for any new comments,
but what about all of the existing comments? How do I set this column’s initial
value for all the comments already in my database?&lt;/p&gt;

&lt;p&gt;Simple enough: I just add a method to my migration that calls &lt;span class="code"&gt;update_attribute&lt;/span&gt;.
Here’s how to do it:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;AddLatestCommentAuthorToPosts&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Migration&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;change&lt;/span&gt;
    add_column &lt;span class="symbol"&gt;:posts&lt;/span&gt;, &lt;span class="symbol"&gt;:latest_comment_author&lt;/span&gt;, &lt;span class="symbol"&gt;:string&lt;/span&gt;
    populate_latest_comment_authors
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;populate_latest_comment_authors&lt;/span&gt;
   &lt;span class="constant"&gt;Post&lt;/span&gt;.all.each &lt;span class="keyword"&gt;do&lt;/span&gt; |post|
      latest_author = post.comments.order(&lt;span class="key"&gt;updated_at&lt;/span&gt;: &lt;span class="symbol"&gt;:desc&lt;/span&gt;).first.author
      post.update_attribute(&lt;span class="symbol"&gt;:latest_comment_author&lt;/span&gt;, latest_author)
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Because you write migrations in Ruby, ActiveRecord makes it simple to perform
complex transformations in a simple, elegant way. Using Ruby I get all the
posts, iterate over each one, lookup the latest comment for that post, and
update the latest comment author field.&lt;/p&gt;

&lt;p&gt;But I’ve made the same performance mistake as before! Looking at my Rails log
after running this migration, I find a series of repeated SQL statements:&lt;/p&gt;

&lt;pre&gt;
SELECT  "comments".* FROM "comments"  WHERE "comments"."post_id" = $1  ORDER BY "comments"."updated_at" DESC LIMIT 1  [["post_id", 2]]
UPDATE "posts" SET "latest_comment_author" = $1, "updated_at" = $2 WHERE "posts"."id" = 2  [["latest_comment_author", "Harry"], ["updated_at", "2015-06-17 13:58:42.512160"]]
SELECT  "comments".* FROM "comments"  WHERE "comments"."post_id" = $1  ORDER BY "comments"."updated_at" DESC LIMIT 1  [["post_id", 3]]
UPDATE "posts" SET "latest_comment_author" = $1, "updated_at" = $2 WHERE "posts"."id" = 3  [["latest_comment_author", "Harry"], ["updated_at", "2015-06-17 13:58:42.514676"]]
SELECT  "comments".* FROM "comments"  WHERE "comments"."post_id" = $1  ORDER BY "comments"."updated_at" DESC LIMIT 1  [["post_id", 1]]
UPDATE "posts" SET "latest_comment_author" = $1, "updated_at" = $2 WHERE "posts"."id" = 1  [["latest_comment_author", "Harry"], ["updated_at", "2015-06-17 13:58:42.516071"]]
&lt;/pre&gt;


&lt;p&gt;Again, I’ve let my data out of the database. By loading all of the posts using
&lt;span class="code"&gt;Post.all&lt;/span&gt;, and iterating over them using &lt;span
class="code"&gt;each&lt;/span&gt;, I’ve triggered this series of repeated SQL commands.
Now I’m transmitting all of the post data, and then more data back and forth
for each post between my database and my Ruby application:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/6/18/ruby-iterate.png"/&gt;&lt;/p&gt;

&lt;p&gt;Just like my previous code, this migration will perform poorly. If I have just
a few posts it probably doesn’t matter. But imagine if there are thousands or
even 100,000s of post records: This migration might take minutes or even hours
to complete! My database server and Ruby need to serialize, transmit and
deserialize data for each one of these SQL commands.&lt;/p&gt;

&lt;p&gt;There must be a better way.&lt;/p&gt;

&lt;h2&gt;Data Migration Using SQL&lt;/h2&gt;

&lt;p&gt;The solution is the same as before: Don’t let your data out of the database.
Instead of writing Ruby code to update each post record, ask the database
server to do it. My database server already has all my post data in an
optimized format, likely loaded into memory. It can iterate over the posts and
update them very quickly.&lt;/p&gt;

&lt;div style="float: right; padding: 17px 0px 10px 30px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2015/6/18/prison.jpg"&gt;&lt;br/&gt;
&lt;/div&gt;


&lt;p&gt;But how? How do I ask the database server to update all the posts? I need to
speak the database’s language: SQL. By writing SQL directly, I can be sure the
database is doing exactly what I want, that it’s using the most efficient
algorithm possible. I can be sure my database and I understand each other.&lt;/p&gt;

&lt;p&gt;Here’s one way to update all the posts using SQL:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="class"&gt;update&lt;/span&gt; posts &lt;span class="class"&gt;set&lt;/span&gt; latest_comment_author = (
  &lt;span class="class"&gt;select&lt;/span&gt; author &lt;span class="keyword"&gt;from&lt;/span&gt; comments
  &lt;span class="keyword"&gt;where&lt;/span&gt; comments.post_id = posts.id
  &lt;span class="keyword"&gt;order&lt;/span&gt; &lt;span class="keyword"&gt;by&lt;/span&gt; comments.updated_at &lt;span class="directive"&gt;desc&lt;/span&gt;
  limit &lt;span class="integer"&gt;1&lt;/span&gt;
)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This tiny SQL program actually uses SQL commands similar to the what I found
repeated in my log file. But there’s an important difference: This SQL code
doesn’t refer to hard coded post id values, such as 1 or 2. Here I’ve updated
all of the posts with a single command!&lt;/p&gt;

&lt;p&gt;How does this work? Let’s take a look:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/6/18/db-iterate.png"/&gt;&lt;/p&gt;

&lt;p&gt;Using a SQL migration, my Ruby code sends a single SQL command to the database
server, which is transmitted over the network to the database. Then, on the
right, my database server performs the same iteration over the posts table,
selecting the latest comment for each one.&lt;/p&gt;

&lt;p&gt;This looks similar, but there’s a crucial difference: The iteration happens
entirely inside the database server. No data needs to be packed, transmitted to
the Ruby server and unpacked again. In fact, the C code performing the repeated
&lt;span class="code"&gt;SELECT&lt;/span&gt; statements has been compiled to native machine
language and will run very quickly. Once it fetches the latest comment, it can
directly update each post because the posts table is stored nearby on the same
server’s hard drive, or even in memory.&lt;/p&gt;

&lt;h2&gt;Why Does the SQL Code Iterate?&lt;/h2&gt;

&lt;p&gt;You might wonder why I drew an iteration inside the database server above.
After all, I sent the database a simple command containing 1 &lt;span
class="code"&gt;UPDATE&lt;/span&gt; statement and 1 &lt;span class="code"&gt;SELECT&lt;/span&gt;
statement. Why does my database need to execute the select over and over again?&lt;/p&gt;

&lt;p&gt;The reason why is that my SQL code uses a &lt;a href="https://en.wikipedia.org/wiki/Correlated_subquery"&gt;correlated
subquery&lt;/a&gt;, because the inner
&lt;span class="code"&gt;SELECT&lt;/span&gt; uses a value from the outer query. Here’s the
SQL again:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/6/18/correlated-subquery.png"/&gt;&lt;/p&gt;

&lt;p&gt;Notice the inner &lt;span class="code"&gt;SELECT&lt;/span&gt; statement refers to &lt;span
class="code"&gt;posts.id&lt;/span&gt;, a value from the surrounding &lt;span
class="code"&gt;UPDATE&lt;/span&gt; statement.  This requires the database server to
iterate over all of the posts, executing the inner select for each row. I’ll
leave it as an exercise for the reader to rewrite this using an &lt;span
class="code"&gt;UPDATE-FROM&lt;/span&gt; statement, a &lt;span class="code"&gt;JOIN&lt;/span&gt; or
even Postgres window functions, which would avoid the repeated &lt;span
class="code"&gt;SELECT&lt;/span&gt;s.&lt;/p&gt;

&lt;p&gt;However, remember if there are indexes on the columns in the comments table,
the iteration selecting the latest comment for each post will be very fast. It
will certainly be thousands of times faster than sending repeated &lt;span
class="code"&gt;SELECT&lt;/span&gt; and &lt;span class="code"&gt;UPDATE&lt;/span&gt; SQL statements
from your Ruby server over the network.&lt;/p&gt;

&lt;h2&gt;Do You Need to Learn SQL?&lt;/h2&gt;

&lt;p&gt;In reality I could have written this data migration using Ruby code.
ActiveRecord provides a rich set of methods, even allowing for sophisticated
queries employing subselects. And in the rare case when
ActiveRecord can’t generate the SQL I need, I can always resort to using the
underlying &lt;a href="https://github.com/rails/arel"&gt;Arel&lt;/a&gt; Ruby library. In practice,
it’s rare that you will actually need to write SQL code inside a Rails
application.&lt;/p&gt;

&lt;p&gt;Then why learn SQL? You should learn SQL because it will give you tremendous
insight into how database servers actually work. You’ll learn what database
servers can really do, and what they can’t. You won’t try to reinvent the wheel
when you already have a server that uses algorithms more powerful and
sophisticated that any you could write.&lt;/p&gt;

&lt;p&gt;Use the database server for what it was designed to do: to solve your data
problems. Whether you write SQL directly or use a tool like ActiveRecord to
generate SQL automatically, perform the search, sort, or calculation you need
right inside the database.&lt;/p&gt;

&lt;p&gt;Don’t let your data out of the database until you need to… until you have just
the values your application really needs.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mark Methods Private When You Don’t Test Them</title>
    <link href="http://patshaughnessy.net/2015/2/16/mark-methods-private-when-you-dont-test-them" rel="alternate"/>
    <id>http://patshaughnessy.net/2015/2/16/mark-methods-private-when-you-dont-test-them</id>
    <published>2015-02-16T04:00:00Z</published>
    <updated>2015-02-16T04:00:00Z</updated>
    <category>ruby</category>
    <author>
      <name></name>
    </author>
    <summary type="html">&lt;div style="float: left; padding: 7px 30px 0px 0px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2015/2/16/plaza-de-la-merced.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;My father in law once lived in same building where Picasso&lt;br/&gt;was born, near the Plaza de la Merced in Málaga, Spain.&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;In Ruby and many other languages, you write private methods to implement
internal logic you don’t want</summary>
    <content type="html">&lt;div style="float: left; padding: 7px 30px 0px 0px; text-align: center;"&gt;
  &lt;img src="http://patshaughnessy.net/assets/2015/2/16/plaza-de-la-merced.jpg"&gt;&lt;br/&gt;
  &lt;i&gt;My father in law once lived in same building where Picasso&lt;br/&gt;was born, near the Plaza de la Merced in Málaga, Spain.&lt;/i&gt;
&lt;/div&gt;


&lt;p&gt;In Ruby and many other languages, you write private methods to implement
internal logic you don’t want to expose. You want the freedom to rename,
repurpose or even delete them without worrying about impacting anything else.
The &lt;span class="code"&gt;private&lt;/span&gt; keyword signals other developers: Don’t rely on this; don’t call
it; it might change. This is especially important when writing framework or
library code that many other developers will use.&lt;/p&gt;

&lt;p&gt;But which methods should you make private? Sometimes this is obvious; sometimes
it isn’t. A good rule of thumb to use is: If you’re not testing a method, it
should be private.&lt;/p&gt;

&lt;br/&gt;


&lt;br/&gt;


&lt;p&gt;But wait a minute! Aren’t we supposed to test everything? Isn’t 100% code
coverage the nirvana every Ruby developer seeks? Let me clarify. You should
mark methods private when you test them indirectly by calling the other, public
methods in the same class. Use the &lt;span class="code"&gt;private&lt;/span&gt; keyword to help organize your code,
to remind yourself what you still need to test, and what you don’t.&lt;/p&gt;

&lt;h2&gt;Three Paintings&lt;/h2&gt;

&lt;p&gt;A simple example will make this clear. Suppose I have a class that describes a
painting:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="constant"&gt;Painting&lt;/span&gt; = &lt;span class="constant"&gt;Struct&lt;/span&gt;.new(&lt;span class="symbol"&gt;:name&lt;/span&gt;, &lt;span class="symbol"&gt;:year&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now I can create a list of three paintings in a &lt;span
class="code"&gt;Minitest::Spec&lt;/span&gt; file like this:&lt;/p&gt;

&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
let(&lt;span class="symbol"&gt;:one&lt;/span&gt;) { &lt;span class="constant"&gt;Painting&lt;/span&gt;.new(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Spanish Couple In Front Of Inn&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;1900&lt;/span&gt;) }
let(&lt;span class="symbol"&gt;:two&lt;/span&gt;) { &lt;span class="constant"&gt;Painting&lt;/span&gt;.new(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Guernica&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;1937&lt;/span&gt;) }
let(&lt;span class="symbol"&gt;:three&lt;/span&gt;) { &lt;span class="constant"&gt;Painting&lt;/span&gt;.new(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Petite Fleurs&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;1958&lt;/span&gt;) }
let(&lt;span class="symbol"&gt;:paintings&lt;/span&gt;) { [one, two, three] }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Suppose my first requirement is to return the first painting from the list.
Simple enough:&lt;/p&gt;

&lt;div class="CodeRay" style="display: inline-block; width: 200px;"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;first&lt;/span&gt;(list)
  list.first
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div class="CodeRay" style="display: inline-block;"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;should return the first element&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  first(paintings).must_equal one
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I just call &lt;span class="code"&gt;Array#first&lt;/span&gt; and I’m done. Returning the
rest of the list is slightly more interesting:&lt;/p&gt;

&lt;div class="CodeRay" style="display: inline-block; width: 200px;"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;rest&lt;/span&gt;(list)
  _, *rest = list
  rest
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div class="CodeRay" style="display: inline-block"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;returns the rest of the elements&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  rest(paintings).must_equal [two, three]
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using &lt;a href="http://devblog.avdi.org/2010/01/31/first-and-rest-in-ruby/"&gt;a trick I learned from
Avdi&lt;/a&gt;, &lt;span
class="code"&gt;rest&lt;/span&gt; always returns an array even if the input list was
empty or had only one element. So far, so good. I’ve written two methods and
two tests:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/2/16/two-tests.png"/&gt;&lt;/p&gt;

&lt;h2&gt;A New Requirement&lt;/h2&gt;

&lt;p&gt;Now suppose my business requirement changes slightly and I instead need to
return the first painting sorted alphabetically by name. Once again, it’s not
hard to do.&lt;/p&gt;

&lt;div class="CodeRay" style="display: inline-block; width: 300px;"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;first&lt;/span&gt;(list)
  list.sort &lt;span class="keyword"&gt;do&lt;/span&gt; |p1, p2|
    p1.name &amp;lt;=&amp;gt; p2.name
  &lt;span class="keyword"&gt;end&lt;/span&gt;.first
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div class="CodeRay" style="display: inline-block"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;should return the first element&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  first(paintings).name.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Guernica&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;


&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And I need &lt;span class="code"&gt;rest&lt;/span&gt; to use the same sort order, so I repeat the call to &lt;span class="code"&gt;sort&lt;/span&gt;:&lt;/p&gt;

&lt;div class="CodeRay" style="display: inline-block; width: 300px;"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;rest&lt;/span&gt;(list)
  _, *rest = list.sort &lt;span class="keyword"&gt;do&lt;/span&gt; |p1, p2|
    p1.name &amp;lt;=&amp;gt; p2.name
  &lt;span class="keyword"&gt;end&lt;/span&gt; 
  rest
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div class="CodeRay" style="display: inline-block"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;returns the rest of the elements&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  rest(paintings).map(&amp;amp;&lt;span class="symbol"&gt;:name&lt;/span&gt;).must_equal [
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Petite Fleurs&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Spanish Couple In Front Of Inn&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  ]
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I’ve implemented new behavior, but still have two methods and two tests:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/2/16/two-tests.png"/&gt;&lt;/p&gt;

&lt;h2&gt;Extracting a Method&lt;/h2&gt;

&lt;p&gt;Because both of my methods are covered by tests, I’m free to refactor them. I
decide to extract a new method, &lt;span class="code"&gt;sorted_by_name&lt;/span&gt;:&lt;/p&gt;

&lt;div class="CodeRay" style="display: inline-block; width: 300px;"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;first&lt;/span&gt;(list)
  sorted_by_name(list).first
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;rest&lt;/span&gt;(list)
  _, *rest = sorted_by_name(list)
  rest
&lt;span class="keyword"&gt;end&lt;/span&gt;




&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;sorted_by_name&lt;/span&gt;(list)
  list.sort &lt;span class="keyword"&gt;do&lt;/span&gt; |p1, p2|
    p1.name &amp;lt;=&amp;gt; p2.name
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;div class="CodeRay" style="display: inline-block; width: 400px;"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;returns the element with the first name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  first(paintings).name.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Guernica&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;returns the rest after the first name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  rest(paintings).map(&amp;amp;&lt;span class="symbol"&gt;:name&lt;/span&gt;).must_equal [
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Petite Fleurs&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Spanish Couple In Front Of Inn&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  ]
&lt;span class="keyword"&gt;end&lt;/span&gt;







&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here I’ve simply moved the call to sort into a utility method called
&lt;span class="code"&gt;sorted_by_name&lt;/span&gt;. Now &lt;span class="code"&gt;first&lt;/span&gt;
and &lt;span class="code"&gt;rest&lt;/span&gt; both call &lt;span
class="code"&gt;sorted_by_name&lt;/span&gt;, making the code a bit clearer and DRY-er. But
now I have three methods and only two tests:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/2/16/two-tests-three-methods.png"/&gt;&lt;/p&gt;

&lt;h2&gt;Mark Methods Private When You Don’t Test Them&lt;/h2&gt;

&lt;p&gt;Notice I didn’t bother writing a test for &lt;span class="code"&gt;sorted_by_name&lt;/span&gt;. I know it works
because my other tests still pass. The existing tests are sufficient; I am
testing &lt;span class="code"&gt;sorted_by_name&lt;/span&gt; indirectly. Because I extracted &lt;span class="code"&gt;sorted_by_name&lt;/span&gt; from
&lt;span class="code"&gt;first&lt;/span&gt; and &lt;span class="code"&gt;rest&lt;/span&gt;, because I
refactored my code without adding any new behavior, no new test were required.&lt;/p&gt;

&lt;p&gt;In this scenario, take the time to mark the new, untested method as private:&lt;/p&gt;

&lt;div class="CodeRay" style="display: inline-block; width: 300px;"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;first&lt;/span&gt;(list)
  sorted_by_name(list).first
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;rest&lt;/span&gt;(list)
  _, *rest = sorted_by_name(list)
  rest
&lt;span class="keyword"&gt;end&lt;/span&gt;



private

&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;sorted_by_name&lt;/span&gt;(list)
  list.sort &lt;span class="keyword"&gt;do&lt;/span&gt; |p1, p2|
    p1.name &amp;lt;=&amp;gt; p2.name
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;div class="CodeRay" style="display: inline-block; width: 400px;"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;
it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;returns the element with the first name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  first(paintings).name.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Guernica&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;returns the rest after the first name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  rest(paintings).map(&amp;amp;&lt;span class="symbol"&gt;:name&lt;/span&gt;).must_equal [
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Petite Fleurs&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Spanish Couple In Front Of Inn&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  ]
&lt;span class="keyword"&gt;end&lt;/span&gt;








&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;span class="code"&gt;private&lt;/span&gt; keyword here reminds me I’ve already tested &lt;span
class="code"&gt;sorted_by_name&lt;/span&gt;, that I don’t need to write new tests for
it. Now &lt;span class="code"&gt;private&lt;/span&gt; is helping me organize my code; it’s helping me remember
which methods I don’t need to test… and which methods are missing important
tests.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://patshaughnessy.net/assets/2015/2/16/two-tests-three-methods-private.png"/&gt;&lt;/p&gt;

&lt;p&gt;If my tests don’t need to know about &lt;span class="code"&gt;sorted_by_name&lt;/span&gt;, then certainly other
developers don’t. It should be private. Marking it private reminds me that it
is being tested indirectly, that I didn’t just forget to write a test for it.
Marking it private tells other developers about what I’ve learned from my own
test suite.&lt;/p&gt;
</content>
  </entry>
</feed>
